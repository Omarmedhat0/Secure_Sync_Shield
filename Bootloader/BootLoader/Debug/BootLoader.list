
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002f2c  08002f2c  00003f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f68  08002f68  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f68  08002f68  00003f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f70  08002f70  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f70  08002f70  00003f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f74  08002f74  00003f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f78  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08002f84  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002f84  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .shared       00000000  08010000  08010000  0000403c  2**0
                  CONTENTS
 13 .debug_info   000091f7  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c2a  00000000  00000000  0000d233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  0000ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067c  00000000  00000000  0000f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015aa6  00000000  00000000  0000fd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a9a6  00000000  00000000  00025802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084ed3  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b507b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000217c  00000000  00000000  000b50c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000b723c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f14 	.word	0x08002f14

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002f14 	.word	0x08002f14

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <u8VerifyCRC>:
 * @param  size: Size of the data array.
 * @param  HostCRC: CRC value to verify against.
 * @retval 1 if CRC matches, 0 if CRC does not match.
 */
static uint8_t u8VerifyCRC(uint8_t DataArr[],uint8_t size, uint32_t HostCRC)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	460b      	mov	r3, r1
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCStatus=CRC_FAIL;
 80004d2:	2301      	movs	r3, #1
 80004d4:	77fb      	strb	r3, [r7, #31]
	uint32_t CRCAcculate=0,temp;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]

	for(int iteration=0;iteration<size;iteration++){
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	e00f      	b.n	8000500 <u8VerifyCRC+0x3c>
		temp= DataArr[iteration];
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	613b      	str	r3, [r7, #16]
		CRCAcculate=HAL_CRC_Accumulate(&hcrc,&temp,1);
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	480f      	ldr	r0, [pc, #60]	@ (8000530 <u8VerifyCRC+0x6c>)
 80004f4:	f000 ff39 	bl	800136a <HAL_CRC_Accumulate>
 80004f8:	61b8      	str	r0, [r7, #24]
	for(int iteration=0;iteration<size;iteration++){
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	7afb      	ldrb	r3, [r7, #11]
 8000502:	697a      	ldr	r2, [r7, #20]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbeb      	blt.n	80004e0 <u8VerifyCRC+0x1c>
	}

	/*Reset CRC Calculation unit*/
	__HAL_CRC_DR_RESET(&hcrc);
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <u8VerifyCRC+0x6c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <u8VerifyCRC+0x6c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f042 0201 	orr.w	r2, r2, #1
 8000516:	609a      	str	r2, [r3, #8]

	if(CRCAcculate==HostCRC){
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	429a      	cmp	r2, r3
 800051e:	d101      	bne.n	8000524 <u8VerifyCRC+0x60>
		CRCStatus=CRC_SUCCESS;
 8000520:	2300      	movs	r3, #0
 8000522:	77fb      	strb	r3, [r7, #31]
	}
	return CRCStatus;
 8000524:	7ffb      	ldrb	r3, [r7, #31]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3720      	adds	r7, #32
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028

08000534 <voidSendAck>:
/**
 * @brief  Sends an acknowledgment response with specified length to follow.
 * @param  lengthToFollow: Length of data or additional information to follow in the response.
 * @retval None
 */
static void voidSendAck(uint8_t lengthToFollow){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	//First Byte is fixed and the 2nd byte represents length of the reply
	uint8_t responsePacket[2]={ACKBYTE,lengthToFollow};
 800053e:	23a5      	movs	r3, #165	@ 0xa5
 8000540:	733b      	strb	r3, [r7, #12]
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	737b      	strb	r3, [r7, #13]

	//then, send a response packet
	 HAL_UART_Transmit(&huart2,(uint8_t*)responsePacket,2,HAL_MAX_DELAY);
 8000546:	f107 010c 	add.w	r1, r7, #12
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	2202      	movs	r2, #2
 8000550:	4803      	ldr	r0, [pc, #12]	@ (8000560 <voidSendAck+0x2c>)
 8000552:	f002 f861 	bl	8002618 <HAL_UART_Transmit>
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000078 	.word	0x20000078

08000564 <voidSendNAck>:
/****************************************************************************************************************/
/*@brief  Sends a negative acknowledgment (NAck) response.
* @param  None
* @retval None
*/
static void voidSendNAck(void){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

	 uint8_t NACKValue= NACKBYTE;
 800056a:	237f      	movs	r3, #127	@ 0x7f
 800056c:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2,&NACKValue,1,HAL_MAX_DELAY);
 800056e:	1df9      	adds	r1, r7, #7
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	2201      	movs	r2, #1
 8000576:	4803      	ldr	r0, [pc, #12]	@ (8000584 <voidSendNAck+0x20>)
 8000578:	f002 f84e 	bl	8002618 <HAL_UART_Transmit>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000078 	.word	0x20000078

08000588 <u8ValidateAddress>:
/****************************************************************************************************************/
static uint8_t u8ValidateAddress(uint32_t address){
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

	uint8_t validAdd= INVALID_ADD;
 8000590:	2301      	movs	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]

		if((address>=FLASH_BASE)&&(address<=FLASH_END)){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800059a:	d306      	bcc.n	80005aa <u8ValidateAddress+0x22>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <u8ValidateAddress+0x44>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d802      	bhi.n	80005aa <u8ValidateAddress+0x22>
			validAdd=VALID_ADD;
 80005a4:	2300      	movs	r3, #0
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	e009      	b.n	80005be <u8ValidateAddress+0x36>
		}else if((address>=SRAM1_BASE)&&(address<=(SRAM1_BASE+(1024*128)))){
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80005b0:	d305      	bcc.n	80005be <u8ValidateAddress+0x36>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <u8ValidateAddress+0x48>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d801      	bhi.n	80005be <u8ValidateAddress+0x36>
			validAdd=VALID_ADD;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
		}
	return validAdd;
 80005be:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	0803ffff 	.word	0x0803ffff
 80005d0:	20020000 	.word	0x20020000

080005d4 <u8ExecuteFlashErase>:
/****************************************************************************************************************/
static uint8_t u8ExecuteFlashErase(uint8_t sectorNumber,uint8_t NumberOfSectors){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	460a      	mov	r2, r1
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	4613      	mov	r3, r2
 80005e2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ErrorStatus=HAL_OK;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	/*check on the inputs validation*/
	if((sectorNumber>=8)&&(sectorNumber!=MASS_ERASE)){
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b07      	cmp	r3, #7
 80005ee:	d906      	bls.n	80005fe <u8ExecuteFlashErase+0x2a>
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2bff      	cmp	r3, #255	@ 0xff
 80005f4:	d003      	beq.n	80005fe <u8ExecuteFlashErase+0x2a>

		ErrorStatus =HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80005fc:	e035      	b.n	800066a <u8ExecuteFlashErase+0x96>

	}else if((NumberOfSectors>8)&&(sectorNumber!=MASS_ERASE)){
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	2b08      	cmp	r3, #8
 8000602:	d906      	bls.n	8000612 <u8ExecuteFlashErase+0x3e>
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2bff      	cmp	r3, #255	@ 0xff
 8000608:	d003      	beq.n	8000612 <u8ExecuteFlashErase+0x3e>
		ErrorStatus =HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000610:	e02b      	b.n	800066a <u8ExecuteFlashErase+0x96>
		/*Implementation*/

		FLASH_EraseInitTypeDef flash;
		uint32_t sectorError ;

		if(sectorNumber==MASS_ERASE){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2bff      	cmp	r3, #255	@ 0xff
 8000616:	d102      	bne.n	800061e <u8ExecuteFlashErase+0x4a>
			flash.TypeErase= FLASH_TYPEERASE_MASSERASE;
 8000618:	2301      	movs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	e012      	b.n	8000644 <u8ExecuteFlashErase+0x70>
		}else{
			 uint8_t remainSectors=8-sectorNumber;
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f1c3 0308 	rsb	r3, r3, #8
 8000624:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			 if(remainSectors<NumberOfSectors){
 8000628:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	429a      	cmp	r2, r3
 8000630:	d202      	bcs.n	8000638 <u8ExecuteFlashErase+0x64>
				 NumberOfSectors = remainSectors;
 8000632:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000636:	71bb      	strb	r3, [r7, #6]
			 }else{
				 /*Do nothing*/
			 }
			flash.TypeErase = FLASH_TYPEERASE_SECTORS ;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
			flash.NbSectors = NumberOfSectors;
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	61fb      	str	r3, [r7, #28]
			flash.Sector    = sectorNumber;
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	61bb      	str	r3, [r7, #24]
		}

		flash.VoltageRange =FLASH_VOLTAGE_RANGE_3;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
		flash.Banks =FLASH_BANK_1;
 8000648:	2301      	movs	r3, #1
 800064a:	617b      	str	r3, [r7, #20]

		//unlock Registers
		HAL_FLASH_Unlock();
 800064c:	f000 ff0c 	bl	8001468 <HAL_FLASH_Unlock>

		ErrorStatus=HAL_FLASHEx_Erase(&flash,&sectorError);
 8000650:	f107 020c 	add.w	r2, r7, #12
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f876 	bl	800174c <HAL_FLASHEx_Erase>
 8000660:	4603      	mov	r3, r0
 8000662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		//Lock the flash again
		HAL_FLASH_Lock();
 8000666:	f000 ff21 	bl	80014ac <HAL_FLASH_Lock>

	}
	return ErrorStatus;
 800066a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800066e:	4618      	mov	r0, r3
 8000670:	3728      	adds	r7, #40	@ 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <u8ExecuteMemoryWrite>:
/****************************************************************************************************************/
static uint8_t u8ExecuteMemoryWrite(uint8_t data[],uint8_t dataLength,uint32_t baseAddress){
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	460b      	mov	r3, r1
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	72fb      	strb	r3, [r7, #11]
	uint8_t ErrorStatus;
	//Step1: Check if this address in the SRAM range or the flash range
	//In the flash range
	if((baseAddress>=FLASH_BASE)&&(baseAddress<=FLASH_END)){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800068c:	d324      	bcc.n	80006d8 <u8ExecuteMemoryWrite+0x60>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a1e      	ldr	r2, [pc, #120]	@ (800070c <u8ExecuteMemoryWrite+0x94>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d820      	bhi.n	80006d8 <u8ExecuteMemoryWrite+0x60>

		for(uint8_t iteration=0;iteration<dataLength;iteration++){
 8000696:	2300      	movs	r3, #0
 8000698:	75bb      	strb	r3, [r7, #22]
 800069a:	e018      	b.n	80006ce <u8ExecuteMemoryWrite+0x56>

			//Step2: Unlock the flash register
			HAL_FLASH_Unlock();
 800069c:	f000 fee4 	bl	8001468 <HAL_FLASH_Unlock>
			ErrorStatus=HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, baseAddress+iteration, data[iteration]);
 80006a0:	7dba      	ldrb	r2, [r7, #22]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	18d1      	adds	r1, r2, r3
 80006a6:	7dbb      	ldrb	r3, [r7, #22]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	4413      	add	r3, r2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2200      	movs	r2, #0
 80006b2:	461c      	mov	r4, r3
 80006b4:	4615      	mov	r5, r2
 80006b6:	4622      	mov	r2, r4
 80006b8:	462b      	mov	r3, r5
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 fe80 	bl	80013c0 <HAL_FLASH_Program>
 80006c0:	4603      	mov	r3, r0
 80006c2:	75fb      	strb	r3, [r7, #23]

			//Step3: Lock the flash again
			HAL_FLASH_Lock();
 80006c4:	f000 fef2 	bl	80014ac <HAL_FLASH_Lock>
		for(uint8_t iteration=0;iteration<dataLength;iteration++){
 80006c8:	7dbb      	ldrb	r3, [r7, #22]
 80006ca:	3301      	adds	r3, #1
 80006cc:	75bb      	strb	r3, [r7, #22]
 80006ce:	7dba      	ldrb	r2, [r7, #22]
 80006d0:	7afb      	ldrb	r3, [r7, #11]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d3e2      	bcc.n	800069c <u8ExecuteMemoryWrite+0x24>
 80006d6:	e013      	b.n	8000700 <u8ExecuteMemoryWrite+0x88>

		}
	//In the SRAM range
	}else{
		uint8_t* ptrDest= (uint8_t*)baseAddress;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	613b      	str	r3, [r7, #16]
		for(uint8_t iteration=0;iteration<dataLength;iteration++){
 80006dc:	2300      	movs	r3, #0
 80006de:	757b      	strb	r3, [r7, #21]
 80006e0:	e00a      	b.n	80006f8 <u8ExecuteMemoryWrite+0x80>
			ptrDest[iteration]= data[iteration];
 80006e2:	7d7b      	ldrb	r3, [r7, #21]
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	441a      	add	r2, r3
 80006e8:	7d7b      	ldrb	r3, [r7, #21]
 80006ea:	6939      	ldr	r1, [r7, #16]
 80006ec:	440b      	add	r3, r1
 80006ee:	7812      	ldrb	r2, [r2, #0]
 80006f0:	701a      	strb	r2, [r3, #0]
		for(uint8_t iteration=0;iteration<dataLength;iteration++){
 80006f2:	7d7b      	ldrb	r3, [r7, #21]
 80006f4:	3301      	adds	r3, #1
 80006f6:	757b      	strb	r3, [r7, #21]
 80006f8:	7d7a      	ldrb	r2, [r7, #21]
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d3f0      	bcc.n	80006e2 <u8ExecuteMemoryWrite+0x6a>

		}
	}

	return ErrorStatus;
 8000700:	7dfb      	ldrb	r3, [r7, #23]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bdb0      	pop	{r4, r5, r7, pc}
 800070a:	bf00      	nop
 800070c:	0803ffff 	.word	0x0803ffff

08000710 <BL_voidHandleGetVersionCmd>:
/***********************************************************/
/****************Function Implementation********************/
/***********************************************************/


void BL_voidHandleGetVersionCmd(uint8_t commandPacket[]){
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	uint8_t packetLength =commandPacket[0]+1 ;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	75fb      	strb	r3, [r7, #23]
	uint8_t CRCStatus;
	uint8_t BLVersion=BL_VERSION;
 8000720:	2301      	movs	r3, #1
 8000722:	73bb      	strb	r3, [r7, #14]

	uint32_t HostCRC = *((uint32_t*)(commandPacket+packetLength-4));
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	3b04      	subs	r3, #4
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	613b      	str	r3, [r7, #16]

	//Step1: Verify CRC
	CRCStatus = u8VerifyCRC(commandPacket,packetLength-4,HostCRC);
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	3b04      	subs	r3, #4
 8000734:	b2db      	uxtb	r3, r3
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	4619      	mov	r1, r3
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff fec2 	bl	80004c4 <u8VerifyCRC>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]

	if(CRCStatus==CRC_SUCCESS){
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d10b      	bne.n	8000762 <BL_voidHandleGetVersionCmd+0x52>
		//Firstly, Send the response Packet
		voidSendAck(1u); //Bootloader version has size of 1byte
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff fef2 	bl	8000534 <voidSendAck>

		//Secondly, Send reply packet in which there is the bootloader version
		 HAL_UART_Transmit(&huart2,&BLVersion,1,HAL_MAX_DELAY);
 8000750:	f107 010e 	add.w	r1, r7, #14
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	2201      	movs	r2, #1
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <BL_voidHandleGetVersionCmd+0x60>)
 800075c:	f001 ff5c 	bl	8002618 <HAL_UART_Transmit>

	}else{
		voidSendNAck();
	}

}
 8000760:	e001      	b.n	8000766 <BL_voidHandleGetVersionCmd+0x56>
		voidSendNAck();
 8000762:	f7ff feff 	bl	8000564 <voidSendNAck>
}
 8000766:	bf00      	nop
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000078 	.word	0x20000078

08000774 <BL_voidHandleGetHelpCmd>:
/****************************************************************************************************************/
void BL_voidHandleGetHelpCmd(uint8_t commandPacket[]){
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t packetLength =commandPacket[0]+1 ;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	77fb      	strb	r3, [r7, #31]
	uint8_t CRCStatus;
	uint8_t arrOfCommands[]={
 8000784:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <BL_voidHandleGetHelpCmd+0x68>)
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	ca07      	ldmia	r2, {r0, r1, r2}
 800078c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						 BL_MEMEORY_READ,
						 BL_READ_SECTOR_STATUS,
						 BL_OTP_READ,
						 BL_DIS_RW_PROTECT
	  };
	uint32_t HostCRC = *((uint32_t*)(commandPacket+packetLength-4));
 8000790:	7ffb      	ldrb	r3, [r7, #31]
 8000792:	3b04      	subs	r3, #4
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	61bb      	str	r3, [r7, #24]

	//Step1: Verify CRC
	CRCStatus = u8VerifyCRC(commandPacket,packetLength-4,HostCRC);
 800079c:	7ffb      	ldrb	r3, [r7, #31]
 800079e:	3b04      	subs	r3, #4
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	69ba      	ldr	r2, [r7, #24]
 80007a4:	4619      	mov	r1, r3
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fe8c 	bl	80004c4 <u8VerifyCRC>
 80007ac:	4603      	mov	r3, r0
 80007ae:	75fb      	strb	r3, [r7, #23]

	if(CRCStatus==CRC_SUCCESS){
 80007b0:	7dfb      	ldrb	r3, [r7, #23]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10b      	bne.n	80007ce <BL_voidHandleGetHelpCmd+0x5a>
		//Firstly, Send the response Packet
		//The supported commands have size of 10 bytes

		voidSendAck(sizeof(arrOfCommands));
 80007b6:	200c      	movs	r0, #12
 80007b8:	f7ff febc 	bl	8000534 <voidSendAck>
		//Secondly, Send reply packet in which there are the supported commands
		HAL_UART_Transmit(&huart2,arrOfCommands,sizeof(arrOfCommands),HAL_MAX_DELAY);
 80007bc:	f107 0108 	add.w	r1, r7, #8
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	220c      	movs	r2, #12
 80007c6:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <BL_voidHandleGetHelpCmd+0x6c>)
 80007c8:	f001 ff26 	bl	8002618 <HAL_UART_Transmit>

	}else{
			voidSendNAck();
	}
}
 80007cc:	e001      	b.n	80007d2 <BL_voidHandleGetHelpCmd+0x5e>
			voidSendNAck();
 80007ce:	f7ff fec9 	bl	8000564 <voidSendNAck>
}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	08002f2c 	.word	0x08002f2c
 80007e0:	20000078 	.word	0x20000078

080007e4 <BL_voidHandleGetChipIdCmd>:
/****************************************************************************************************************/

void BL_voidHandleGetChipIdCmd(uint8_t commandPacket[]){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	uint8_t packetLength =commandPacket[0]+1 ;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	75fb      	strb	r3, [r7, #23]
    uint8_t CRCStatus;
    uint16_t ChipID =(CHIP_ID_REG_ADD & 0x0fff);
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <BL_voidHandleGetChipIdCmd+0x68>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007fe:	b29b      	uxth	r3, r3
 8000800:	81bb      	strh	r3, [r7, #12]
    uint32_t HostCRC = *((uint32_t*)(commandPacket+packetLength-4));
 8000802:	7dfb      	ldrb	r3, [r7, #23]
 8000804:	3b04      	subs	r3, #4
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	613b      	str	r3, [r7, #16]

    //Step1: Verify CRC
    CRCStatus = u8VerifyCRC(commandPacket,packetLength-4,HostCRC);
 800080e:	7dfb      	ldrb	r3, [r7, #23]
 8000810:	3b04      	subs	r3, #4
 8000812:	b2db      	uxtb	r3, r3
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	4619      	mov	r1, r3
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fe53 	bl	80004c4 <u8VerifyCRC>
 800081e:	4603      	mov	r3, r0
 8000820:	73fb      	strb	r3, [r7, #15]

    if(CRCStatus==CRC_SUCCESS){
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10b      	bne.n	8000840 <BL_voidHandleGetChipIdCmd+0x5c>
    	//Firstly, Send the response Packet
    	voidSendAck(2u); //The chip id has size of 1byte
 8000828:	2002      	movs	r0, #2
 800082a:	f7ff fe83 	bl	8000534 <voidSendAck>

    	HAL_UART_Transmit(&huart2,(uint8_t*)&ChipID,2,HAL_MAX_DELAY);
 800082e:	f107 010c 	add.w	r1, r7, #12
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2202      	movs	r2, #2
 8000838:	4805      	ldr	r0, [pc, #20]	@ (8000850 <BL_voidHandleGetChipIdCmd+0x6c>)
 800083a:	f001 feed 	bl	8002618 <HAL_UART_Transmit>

    }else{
    		voidSendNAck();
    }

}
 800083e:	e001      	b.n	8000844 <BL_voidHandleGetChipIdCmd+0x60>
    		voidSendNAck();
 8000840:	f7ff fe90 	bl	8000564 <voidSendNAck>
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	e0042000 	.word	0xe0042000
 8000850:	20000078 	.word	0x20000078

08000854 <BL_voidHandleRDPStatusCmd>:
/****************************************************************************************************************/

void BL_voidHandleRDPStatusCmd(uint8_t commandPacket[]){
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uint8_t packetLength =commandPacket[0]+1 ;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	75fb      	strb	r3, [r7, #23]
	uint8_t CRCStatus;

	uint32_t HostCRC = *((uint32_t*)(commandPacket+packetLength-4));
 8000864:	7dfb      	ldrb	r3, [r7, #23]
 8000866:	3b04      	subs	r3, #4
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	613b      	str	r3, [r7, #16]

	//Step1: Verify CRC
	CRCStatus = u8VerifyCRC(commandPacket,packetLength-4,HostCRC);
 8000870:	7dfb      	ldrb	r3, [r7, #23]
 8000872:	3b04      	subs	r3, #4
 8000874:	b2db      	uxtb	r3, r3
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	4619      	mov	r1, r3
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fe22 	bl	80004c4 <u8VerifyCRC>
 8000880:	4603      	mov	r3, r0
 8000882:	73fb      	strb	r3, [r7, #15]

	if(CRCStatus==CRC_SUCCESS){
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d110      	bne.n	80008ac <BL_voidHandleRDPStatusCmd+0x58>
		//Firstly, Send the response Packet
		voidSendAck(1u);
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fe52 	bl	8000534 <voidSendAck>

		uint8_t RDPStatus=(uint8_t)((RDP_USER_OPTION_WORD>>8) & 0xff);
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <BL_voidHandleRDPStatusCmd+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b2db      	uxtb	r3, r3
 8000898:	73bb      	strb	r3, [r7, #14]

		HAL_UART_Transmit(&huart2,&RDPStatus,1,HAL_MAX_DELAY);
 800089a:	f107 010e 	add.w	r1, r7, #14
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	2201      	movs	r2, #1
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <BL_voidHandleRDPStatusCmd+0x68>)
 80008a6:	f001 feb7 	bl	8002618 <HAL_UART_Transmit>

	}else{
		voidSendNAck();
	}

}
 80008aa:	e001      	b.n	80008b0 <BL_voidHandleRDPStatusCmd+0x5c>
		voidSendNAck();
 80008ac:	f7ff fe5a 	bl	8000564 <voidSendNAck>
}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	1fffc000 	.word	0x1fffc000
 80008bc:	20000078 	.word	0x20000078

080008c0 <BL_voidHandleGoToAddressCmd>:
/****************************************************************************************************************/

void BL_voidHandleGoToAddressCmd(uint8_t commandPacket[]){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	uint8_t packetLength =commandPacket[0]+1 ;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	77fb      	strb	r3, [r7, #31]
	uint8_t CRCStatus;

	uint32_t HostCRC = *((uint32_t*)(commandPacket+packetLength-4));
 80008d0:	7ffb      	ldrb	r3, [r7, #31]
 80008d2:	3b04      	subs	r3, #4
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	61bb      	str	r3, [r7, #24]

	//Step1: Verify CRC
	CRCStatus = u8VerifyCRC(commandPacket,packetLength-4,HostCRC);
 80008dc:	7ffb      	ldrb	r3, [r7, #31]
 80008de:	3b04      	subs	r3, #4
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4619      	mov	r1, r3
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fdec 	bl	80004c4 <u8VerifyCRC>
 80008ec:	4603      	mov	r3, r0
 80008ee:	75fb      	strb	r3, [r7, #23]

	if(CRCStatus==CRC_SUCCESS){
 80008f0:	7dfb      	ldrb	r3, [r7, #23]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d12a      	bne.n	800094c <BL_voidHandleGoToAddressCmd+0x8c>
		//Firstly, Send the response Packet
		voidSendAck(1u);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff fe1c 	bl	8000534 <voidSendAck>

		//Extract The address from the packet
		uint32_t address=*((uint32_t*)&commandPacket[2]);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000902:	613b      	str	r3, [r7, #16]

		//Check on the address
		uint8_t valid_address=u8ValidateAddress(address);
 8000904:	6938      	ldr	r0, [r7, #16]
 8000906:	f7ff fe3f 	bl	8000588 <u8ValidateAddress>
 800090a:	4603      	mov	r3, r0
 800090c:	72fb      	strb	r3, [r7, #11]

		if(valid_address==VALID_ADD){
 800090e:	7afb      	ldrb	r3, [r7, #11]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d112      	bne.n	800093a <BL_voidHandleGoToAddressCmd+0x7a>

			//Send the replay packet
			HAL_UART_Transmit(&huart2,&valid_address,1,HAL_MAX_DELAY);
 8000914:	f107 010b 	add.w	r1, r7, #11
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	2201      	movs	r2, #1
 800091e:	480e      	ldr	r0, [pc, #56]	@ (8000958 <BL_voidHandleGoToAddressCmd+0x98>)
 8000920:	f001 fe7a 	bl	8002618 <HAL_UART_Transmit>

			//Jump on this address
			void(*ptr)(void)=NULL;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

			//Increment the address by 1 to make T bit = 1
			address|=0x1;
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	613b      	str	r3, [r7, #16]
			ptr = (void*)address;
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	60fb      	str	r3, [r7, #12]
			ptr();
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4798      	blx	r3
		}
	}else{
			voidSendNAck();
	}

}
 8000938:	e00a      	b.n	8000950 <BL_voidHandleGoToAddressCmd+0x90>
			HAL_UART_Transmit(&huart2,&valid_address,1,HAL_MAX_DELAY);
 800093a:	f107 010b 	add.w	r1, r7, #11
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	2201      	movs	r2, #1
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <BL_voidHandleGoToAddressCmd+0x98>)
 8000946:	f001 fe67 	bl	8002618 <HAL_UART_Transmit>
}
 800094a:	e001      	b.n	8000950 <BL_voidHandleGoToAddressCmd+0x90>
			voidSendNAck();
 800094c:	f7ff fe0a 	bl	8000564 <voidSendNAck>
}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000078 	.word	0x20000078

0800095c <BL_voidHandleFlashEraseCmd>:
/****************************************************************************************************************/

void BL_voidHandleFlashEraseCmd(uint8_t commandPacket[]){
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	uint8_t packetLength =commandPacket[0]+1 ;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	75fb      	strb	r3, [r7, #23]
	uint8_t CRCStatus;
	uint8_t eraseStatus;
	uint32_t HostCRC = *((uint32_t*)(commandPacket+packetLength-4));
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	3b04      	subs	r3, #4
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	613b      	str	r3, [r7, #16]

	//Step1: Verify CRC
	CRCStatus = u8VerifyCRC(commandPacket,packetLength-4,HostCRC);
 8000978:	7dfb      	ldrb	r3, [r7, #23]
 800097a:	3b04      	subs	r3, #4
 800097c:	b2db      	uxtb	r3, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4619      	mov	r1, r3
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fd9e 	bl	80004c4 <u8VerifyCRC>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]

	if(CRCStatus==CRC_SUCCESS){
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d117      	bne.n	80009c2 <BL_voidHandleFlashEraseCmd+0x66>
		//Firstly, Send the response Packet
		voidSendAck(1u);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fdce 	bl	8000534 <voidSendAck>
		eraseStatus =u8ExecuteFlashErase(commandPacket[2],commandPacket[3]);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3302      	adds	r3, #2
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3303      	adds	r3, #3
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4610      	mov	r0, r2
 80009a8:	f7ff fe14 	bl	80005d4 <u8ExecuteFlashErase>
 80009ac:	4603      	mov	r3, r0
 80009ae:	73bb      	strb	r3, [r7, #14]

		HAL_UART_Transmit(&huart2,&eraseStatus,1,HAL_MAX_DELAY);
 80009b0:	f107 010e 	add.w	r1, r7, #14
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	2201      	movs	r2, #1
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <BL_voidHandleFlashEraseCmd+0x74>)
 80009bc:	f001 fe2c 	bl	8002618 <HAL_UART_Transmit>

	}else{
			voidSendNAck();
	}
}
 80009c0:	e001      	b.n	80009c6 <BL_voidHandleFlashEraseCmd+0x6a>
			voidSendNAck();
 80009c2:	f7ff fdcf 	bl	8000564 <voidSendNAck>
}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000078 	.word	0x20000078

080009d4 <BL_voidHandleMemeoryWriteCmd>:
/****************************************************************************************************************/

void BL_voidHandleMemeoryWriteCmd(uint8_t commandPacket[]){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	uint8_t packetLength =commandPacket[0]+1 ;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	77fb      	strb	r3, [r7, #31]
	uint8_t CRCStatus;
	uint8_t writtingStatus;
	uint8_t addressStatus;
	uint8_t dataLength;

	uint32_t HostCRC = *((uint32_t*)(commandPacket+packetLength-4));
 80009e4:	7ffb      	ldrb	r3, [r7, #31]
 80009e6:	3b04      	subs	r3, #4
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	61bb      	str	r3, [r7, #24]

	//Step1: Verify CRC
	CRCStatus = u8VerifyCRC(commandPacket,packetLength-4,HostCRC);
 80009f0:	7ffb      	ldrb	r3, [r7, #31]
 80009f2:	3b04      	subs	r3, #4
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	4619      	mov	r1, r3
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fd62 	bl	80004c4 <u8VerifyCRC>
 8000a00:	4603      	mov	r3, r0
 8000a02:	75fb      	strb	r3, [r7, #23]

	if(CRCStatus==CRC_SUCCESS){
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d126      	bne.n	8000a58 <BL_voidHandleMemeoryWriteCmd+0x84>
		//Firstly, Send the response Packet
		voidSendAck(1u);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fd92 	bl	8000534 <voidSendAck>

		//Step1:Extract the base address
		uint32_t baseAddress=*((uint32_t*)(&commandPacket[2]));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a16:	613b      	str	r3, [r7, #16]

		//Step2:Check on the address
		addressStatus =u8ValidateAddress(baseAddress);
 8000a18:	6938      	ldr	r0, [r7, #16]
 8000a1a:	f7ff fdb5 	bl	8000588 <u8ValidateAddress>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	73fb      	strb	r3, [r7, #15]

		if(addressStatus==VALID_ADD){
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10c      	bne.n	8000a42 <BL_voidHandleMemeoryWriteCmd+0x6e>

			//Step3:Extract the data length
			dataLength=commandPacket[6];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	799b      	ldrb	r3, [r3, #6]
 8000a2c:	73bb      	strb	r3, [r7, #14]
			writtingStatus= u8ExecuteMemoryWrite(&commandPacket[7],dataLength,baseAddress);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3307      	adds	r3, #7
 8000a32:	7bb9      	ldrb	r1, [r7, #14]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe1e 	bl	8000678 <u8ExecuteMemoryWrite>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	737b      	strb	r3, [r7, #13]
 8000a40:	e001      	b.n	8000a46 <BL_voidHandleMemeoryWriteCmd+0x72>

		}else{
			//Wrong address
			writtingStatus = WRITING_FAIL;
 8000a42:	2301      	movs	r3, #1
 8000a44:	737b      	strb	r3, [r7, #13]
		}
		HAL_UART_Transmit(&huart2,&writtingStatus,1,HAL_MAX_DELAY);
 8000a46:	f107 010d 	add.w	r1, r7, #13
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <BL_voidHandleMemeoryWriteCmd+0x90>)
 8000a52:	f001 fde1 	bl	8002618 <HAL_UART_Transmit>

	}else{
			voidSendNAck();
	}

}
 8000a56:	e001      	b.n	8000a5c <BL_voidHandleMemeoryWriteCmd+0x88>
			voidSendNAck();
 8000a58:	f7ff fd84 	bl	8000564 <voidSendNAck>
}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000078 	.word	0x20000078

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b5b0      	push	{r4, r5, r7, lr}
 8000a6a:	b08c      	sub	sp, #48	@ 0x30
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  char fatma[]="FatmaEzzatAbdelaziz\r\n";
 8000a6e:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <main+0x90>)
 8000a70:	f107 0418 	add.w	r4, r7, #24
 8000a74:	461d      	mov	r5, r3
 8000a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a7e:	6020      	str	r0, [r4, #0]
 8000a80:	3404      	adds	r4, #4
 8000a82:	8021      	strh	r1, [r4, #0]
	  HAL_Init();
 8000a84:	f000 fada 	bl	800103c <HAL_Init>

		GPIO_InitTypeDef sw={
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
 8000a96:	2302      	movs	r3, #2
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]
					.Speed=GPIO_SPEED_FREQ_MEDIUM
		};
  /* USER CODE END 1 */

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 facb 	bl	800103c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f8af 	bl	8000c08 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aaa:	f000 f975 	bl	8000d98 <MX_GPIO_Init>
  MX_CRC_Init();
 8000aae:	f000 f90b 	bl	8000cc8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000ab2:	f000 f91d 	bl	8000cf0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ab6:	f000 f945 	bl	8000d44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_Init(GPIOA,&sw);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <main+0x94>)
 8000ac0:	f000 ff66 	bl	8001990 <HAL_GPIO_Init>

   if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	480d      	ldr	r0, [pc, #52]	@ (8000afc <main+0x94>)
 8000ac8:	f001 f8e6 	bl	8001c98 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d102      	bne.n	8000ad8 <main+0x70>
 	  Bootloader_UARTRead();
 8000ad2:	f000 f817 	bl	8000b04 <Bootloader_UARTRead>
 8000ad6:	e001      	b.n	8000adc <main+0x74>
   }else{
 	  Bootloader_Jump_App();
 8000ad8:	f000 f87e 	bl	8000bd8 <Bootloader_Jump_App>

   }
   while (1)
   {

 	  HAL_UART_Transmit(&huart2,(uint8_t*)fatma,sizeof(fatma),HAL_MAX_DELAY);
 8000adc:	f107 0118 	add.w	r1, r7, #24
 8000ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae4:	2216      	movs	r2, #22
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <main+0x98>)
 8000ae8:	f001 fd96 	bl	8002618 <HAL_UART_Transmit>
 	  HAL_Delay(1000);
 8000aec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af0:	f000 fb16 	bl	8001120 <HAL_Delay>
 	  HAL_UART_Transmit(&huart2,(uint8_t*)fatma,sizeof(fatma),HAL_MAX_DELAY);
 8000af4:	bf00      	nop
 8000af6:	e7f1      	b.n	8000adc <main+0x74>
 8000af8:	08002f38 	.word	0x08002f38
 8000afc:	40020000 	.word	0x40020000
 8000b00:	20000078 	.word	0x20000078

08000b04 <Bootloader_UARTRead>:

   }
}
void Bootloader_UARTRead(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0c0      	sub	sp, #256	@ 0x100
 8000b08:	af00      	add	r7, sp, #0


	uint8_t commandPacket[255]={0};
 8000b0a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b0e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	3304      	adds	r3, #4
 8000b18:	22fb      	movs	r2, #251	@ 0xfb
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 f9cd 	bl	8002ebc <memset>

	while(1){
		//Clear the command Packet every iteration
		memset(commandPacket,0,255);
 8000b22:	463b      	mov	r3, r7
 8000b24:	22ff      	movs	r2, #255	@ 0xff
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 f9c7 	bl	8002ebc <memset>

		/*Step1: Read the first byte which includes the "length to follow"*/
		HAL_UART_Receive(&huart2, &commandPacket[0],1, HAL_MAX_DELAY);
 8000b2e:	4639      	mov	r1, r7
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	2201      	movs	r2, #1
 8000b36:	4827      	ldr	r0, [pc, #156]	@ (8000bd4 <Bootloader_UARTRead+0xd0>)
 8000b38:	f001 fdf9 	bl	800272e <HAL_UART_Receive>

		/*Step2: Read the rest of command, its size is the previous byte value*/
		HAL_UART_Receive(&huart2, &commandPacket[1],commandPacket[0] , HAL_MAX_DELAY);
 8000b3c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b40:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	463b      	mov	r3, r7
 8000b4a:	1c59      	adds	r1, r3, #1
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	4820      	ldr	r0, [pc, #128]	@ (8000bd4 <Bootloader_UARTRead+0xd0>)
 8000b52:	f001 fdec 	bl	800272e <HAL_UART_Receive>

		/*Step3: */
		switch(commandPacket[1]){
 8000b56:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b5a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b5e:	785b      	ldrb	r3, [r3, #1]
 8000b60:	3b51      	subs	r3, #81	@ 0x51
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d8dd      	bhi.n	8000b22 <Bootloader_UARTRead+0x1e>
 8000b66:	a201      	add	r2, pc, #4	@ (adr r2, 8000b6c <Bootloader_UARTRead+0x68>)
 8000b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6c:	08000b89 	.word	0x08000b89
 8000b70:	08000b93 	.word	0x08000b93
 8000b74:	08000b9d 	.word	0x08000b9d
 8000b78:	08000ba7 	.word	0x08000ba7
 8000b7c:	08000bb1 	.word	0x08000bb1
 8000b80:	08000bbb 	.word	0x08000bbb
 8000b84:	08000bc5 	.word	0x08000bc5

		case BL_GET_VERSION:
			BL_voidHandleGetVersionCmd(commandPacket);
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fdc0 	bl	8000710 <BL_voidHandleGetVersionCmd>
			break;
 8000b90:	e01e      	b.n	8000bd0 <Bootloader_UARTRead+0xcc>

		case BL_GET_HELP:
			BL_voidHandleGetHelpCmd(commandPacket);
 8000b92:	463b      	mov	r3, r7
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fded 	bl	8000774 <BL_voidHandleGetHelpCmd>
			break;
 8000b9a:	e019      	b.n	8000bd0 <Bootloader_UARTRead+0xcc>

		case BL_GET_CHIP_ID:
			BL_voidHandleGetChipIdCmd(commandPacket);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe20 	bl	80007e4 <BL_voidHandleGetChipIdCmd>
			break;
 8000ba4:	e014      	b.n	8000bd0 <Bootloader_UARTRead+0xcc>

		case BL_GET_RDP_STATUS:
			BL_voidHandleRDPStatusCmd(commandPacket);
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe53 	bl	8000854 <BL_voidHandleRDPStatusCmd>
			break;
 8000bae:	e00f      	b.n	8000bd0 <Bootloader_UARTRead+0xcc>

		case BL_GOTO_ADDRESS:
			BL_voidHandleGoToAddressCmd(commandPacket);
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fe84 	bl	80008c0 <BL_voidHandleGoToAddressCmd>
			break;
 8000bb8:	e00a      	b.n	8000bd0 <Bootloader_UARTRead+0xcc>

		case BL_FLASH_ERASE:
			BL_voidHandleFlashEraseCmd(commandPacket);
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fecd 	bl	800095c <BL_voidHandleFlashEraseCmd>
			break;
 8000bc2:	e005      	b.n	8000bd0 <Bootloader_UARTRead+0xcc>

		case BL_MEMEORY_WRITE:
			BL_voidHandleMemeoryWriteCmd(commandPacket);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff04 	bl	80009d4 <BL_voidHandleMemeoryWriteCmd>
			break;
 8000bcc:	bf00      	nop
 8000bce:	e7a8      	b.n	8000b22 <Bootloader_UARTRead+0x1e>
		memset(commandPacket,0,255);
 8000bd0:	e7a7      	b.n	8000b22 <Bootloader_UARTRead+0x1e>
 8000bd2:	bf00      	nop
 8000bd4:	20000078 	.word	0x20000078

08000bd8 <Bootloader_Jump_App>:

		}
	}

}
void Bootloader_Jump_App(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
	 * */
	//Pointer to func that points to APP_ResetHandler
	void (*App_ResetHandler)(void);

	//Get the value of the first location on the vector table
	uint32_t Local_MSP =*((volatile uint32_t *)(FLASH_SECTOR2_ADDRESS));
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <Bootloader_Jump_App+0x28>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	60fb      	str	r3, [r7, #12]

	//Assign it in MSP to initialize the stack by assembly
	__asm volatile("MSR MSP, %0"::"r"(Local_MSP));
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f383 8808 	msr	MSP, r3

	//Get the value of the second location on the vector table
	uint32_t RESET_HANDLER_ADD	=*((volatile uint32_t *)(FLASH_SECTOR2_ADDRESS+4));
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <Bootloader_Jump_App+0x2c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	60bb      	str	r3, [r7, #8]
	App_ResetHandler =(void *) RESET_HANDLER_ADD;
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	607b      	str	r3, [r7, #4]

	//Jump on Reset Handler of the Application = start up code
 	App_ResetHandler();
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4798      	blx	r3
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	08008000 	.word	0x08008000
 8000c04:	08008004 	.word	0x08008004

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b094      	sub	sp, #80	@ 0x50
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0320 	add.w	r3, r7, #32
 8000c12:	2230      	movs	r2, #48	@ 0x30
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 f950 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <SystemClock_Config+0xb8>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a22      	ldr	r2, [pc, #136]	@ (8000cc0 <SystemClock_Config+0xb8>)
 8000c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <SystemClock_Config+0xb8>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <SystemClock_Config+0xbc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c54:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <SystemClock_Config+0xbc>)
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <SystemClock_Config+0xbc>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c70:	2310      	movs	r3, #16
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 f823 	bl	8001cc8 <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c88:	f000 f8a0 	bl	8000dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fa86 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cb2:	f000 f88b 	bl	8000dcc <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3750      	adds	r7, #80	@ 0x50
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_CRC_Init+0x20>)
 8000cce:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <MX_CRC_Init+0x24>)
 8000cd0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_CRC_Init+0x20>)
 8000cd4:	f000 fb2d 	bl	8001332 <HAL_CRC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000cde:	f000 f875 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000028 	.word	0x20000028
 8000cec:	40023000 	.word	0x40023000

08000cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <MX_USART1_UART_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d28:	f001 fc26 	bl	8002578 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d32:	f000 f84b 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000030 	.word	0x20000030
 8000d40:	40011000 	.word	0x40011000

08000d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <MX_USART2_UART_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	f001 fbfc 	bl	8002578 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d86:	f000 f821 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000078 	.word	0x20000078
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <MX_GPIO_Init+0x30>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <MX_GPIO_Init+0x30>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <MX_GPIO_Init+0x30>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <Error_Handler+0x8>

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <HAL_CRC_MspInit+0x3c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10d      	bne.n	8000e56 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a09      	ldr	r2, [pc, #36]	@ (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023000 	.word	0x40023000
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	@ 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a32      	ldr	r2, [pc, #200]	@ (8000f54 <HAL_UART_MspInit+0xe8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d12d      	bne.n	8000eea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	4a30      	ldr	r2, [pc, #192]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000e98:	f043 0310 	orr.w	r3, r3, #16
 8000e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a29      	ldr	r2, [pc, #164]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ec6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481e      	ldr	r0, [pc, #120]	@ (8000f5c <HAL_UART_MspInit+0xf0>)
 8000ee4:	f000 fd54 	bl	8001990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee8:	e030      	b.n	8000f4c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <HAL_UART_MspInit+0xf4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d12b      	bne.n	8000f4c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	4a16      	ldr	r2, [pc, #88]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f18:	4a0f      	ldr	r2, [pc, #60]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f20:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <HAL_UART_MspInit+0xec>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_UART_MspInit+0xf0>)
 8000f48:	f000 fd22 	bl	8001990 <HAL_GPIO_Init>
}
 8000f4c:	bf00      	nop
 8000f4e:	3730      	adds	r7, #48	@ 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40011000 	.word	0x40011000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40004400 	.word	0x40004400

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f891 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001020 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fec:	f7ff ffea 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	@ (8001028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	@ (8001034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f001 ff59 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fd25 	bl	8000a68 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001020:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800102c:	08002f78 	.word	0x08002f78
  ldr r2, =_sbss
 8001030:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001034:	200000e4 	.word	0x200000e4

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	@ (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f931 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff feb2 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f93b 	bl	800131a <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f911 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	200000c0 	.word	0x200000c0

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200000c0 	.word	0x200000c0

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	@ (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	@ (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	@ 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	@ 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff8e 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff47 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff5c 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff8e 	bl	8001220 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5d 	bl	80011cc <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffb0 	bl	8001288 <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e00e      	b.n	8001362 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	795b      	ldrb	r3, [r3, #5]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fd67 	bl	8000e28 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800136a:	b480      	push	{r7}
 800136c:	b087      	sub	sp, #28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2202      	movs	r2, #2
 800137e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e00a      	b.n	800139c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	441a      	add	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3f0      	bcc.n	8001386 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2201      	movs	r2, #1
 80013b0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80013b2:	693b      	ldr	r3, [r7, #16]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013d2:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <HAL_FLASH_Program+0xa0>)
 80013d4:	7e1b      	ldrb	r3, [r3, #24]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_FLASH_Program+0x1e>
 80013da:	2302      	movs	r3, #2
 80013dc:	e03b      	b.n	8001456 <HAL_FLASH_Program+0x96>
 80013de:	4b20      	ldr	r3, [pc, #128]	@ (8001460 <HAL_FLASH_Program+0xa0>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013e8:	f000 f870 	bl	80014cc <FLASH_WaitForLastOperation>
 80013ec:	4603      	mov	r3, r0
 80013ee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d12b      	bne.n	800144e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80013fc:	783b      	ldrb	r3, [r7, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	68b8      	ldr	r0, [r7, #8]
 8001402:	f000 f91b 	bl	800163c <FLASH_Program_Byte>
 8001406:	e016      	b.n	8001436 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d105      	bne.n	800141a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800140e:	883b      	ldrh	r3, [r7, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f000 f8ee 	bl	80015f4 <FLASH_Program_HalfWord>
 8001418:	e00d      	b.n	8001436 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d105      	bne.n	800142c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f000 f8c3 	bl	80015b0 <FLASH_Program_Word>
 800142a:	e004      	b.n	8001436 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800142c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001430:	68b8      	ldr	r0, [r7, #8]
 8001432:	f000 f88b 	bl	800154c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001436:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800143a:	f000 f847 	bl	80014cc <FLASH_WaitForLastOperation>
 800143e:	4603      	mov	r3, r0
 8001440:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_FLASH_Program+0xa4>)
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <HAL_FLASH_Program+0xa4>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <HAL_FLASH_Program+0xa0>)
 8001450:	2200      	movs	r2, #0
 8001452:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001454:	7dfb      	ldrb	r3, [r7, #23]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000c4 	.word	0x200000c4
 8001464:	40023c00 	.word	0x40023c00

08001468 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_FLASH_Unlock+0x38>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2b00      	cmp	r3, #0
 8001478:	da0b      	bge.n	8001492 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_FLASH_Unlock+0x38>)
 800147c:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_FLASH_Unlock+0x3c>)
 800147e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <HAL_FLASH_Unlock+0x38>)
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <HAL_FLASH_Unlock+0x40>)
 8001484:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_FLASH_Unlock+0x38>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	da01      	bge.n	8001492 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001492:	79fb      	ldrb	r3, [r7, #7]
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40023c00 	.word	0x40023c00
 80014a4:	45670123 	.word	0x45670123
 80014a8:	cdef89ab 	.word	0xcdef89ab

080014ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_FLASH_Lock+0x1c>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_FLASH_Lock+0x1c>)
 80014b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014ba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40023c00 	.word	0x40023c00

080014cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <FLASH_WaitForLastOperation+0x78>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80014de:	f7ff fe13 	bl	8001108 <HAL_GetTick>
 80014e2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80014e4:	e010      	b.n	8001508 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d00c      	beq.n	8001508 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <FLASH_WaitForLastOperation+0x38>
 80014f4:	f7ff fe08 	bl	8001108 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d201      	bcs.n	8001508 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e019      	b.n	800153c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <FLASH_WaitForLastOperation+0x7c>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e8      	bne.n	80014e6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <FLASH_WaitForLastOperation+0x7c>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <FLASH_WaitForLastOperation+0x7c>)
 8001522:	2201      	movs	r2, #1
 8001524:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <FLASH_WaitForLastOperation+0x7c>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001532:	f000 f8a5 	bl	8001680 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
  
}  
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200000c4 	.word	0x200000c4
 8001548:	40023c00 	.word	0x40023c00

0800154c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <FLASH_Program_DoubleWord+0x60>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	4a13      	ldr	r2, [pc, #76]	@ (80015ac <FLASH_Program_DoubleWord+0x60>)
 800155e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001562:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <FLASH_Program_DoubleWord+0x60>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <FLASH_Program_DoubleWord+0x60>)
 800156a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800156e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <FLASH_Program_DoubleWord+0x60>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <FLASH_Program_DoubleWord+0x60>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	000a      	movs	r2, r1
 8001596:	2300      	movs	r3, #0
 8001598:	68f9      	ldr	r1, [r7, #12]
 800159a:	3104      	adds	r1, #4
 800159c:	4613      	mov	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <FLASH_Program_Word+0x40>)
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <FLASH_Program_Word+0x40>)
 80015c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <FLASH_Program_Word+0x40>)
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <FLASH_Program_Word+0x40>)
 80015cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <FLASH_Program_Word+0x40>)
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <FLASH_Program_Word+0x40>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001600:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <FLASH_Program_HalfWord+0x44>)
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <FLASH_Program_HalfWord+0x44>)
 8001606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800160a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <FLASH_Program_HalfWord+0x44>)
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	4a09      	ldr	r2, [pc, #36]	@ (8001638 <FLASH_Program_HalfWord+0x44>)
 8001612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001616:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <FLASH_Program_HalfWord+0x44>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <FLASH_Program_HalfWord+0x44>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	801a      	strh	r2, [r3, #0]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00

0800163c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <FLASH_Program_Byte+0x40>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	4a0b      	ldr	r2, [pc, #44]	@ (800167c <FLASH_Program_Byte+0x40>)
 800164e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <FLASH_Program_Byte+0x40>)
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <FLASH_Program_Byte+0x40>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800165c:	4b07      	ldr	r3, [pc, #28]	@ (800167c <FLASH_Program_Byte+0x40>)
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	4a06      	ldr	r2, [pc, #24]	@ (800167c <FLASH_Program_Byte+0x40>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00

08001680 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001684:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001690:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	4a2b      	ldr	r2, [pc, #172]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 800169a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800169c:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 800169e:	2210      	movs	r2, #16
 80016a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80016a2:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f003 0320 	and.w	r3, r3, #32
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80016ae:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	4a24      	ldr	r2, [pc, #144]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 80016b8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 80016bc:	2220      	movs	r2, #32
 80016be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80016c0:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 80016d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 80016da:	2240      	movs	r2, #64	@ 0x40
 80016dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	4a15      	ldr	r2, [pc, #84]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 80016f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 80016f8:	2280      	movs	r2, #128	@ 0x80
 80016fa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d009      	beq.n	800171c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 8001712:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 8001716:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800171a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <FLASH_SetErrorCode+0xc8>)
 8001732:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001734:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <FLASH_SetErrorCode+0xc4>)
 8001736:	2202      	movs	r2, #2
 8001738:	60da      	str	r2, [r3, #12]
  }
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40023c00 	.word	0x40023c00
 8001748:	200000c4 	.word	0x200000c4

0800174c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800175e:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <HAL_FLASHEx_Erase+0xd8>)
 8001760:	7e1b      	ldrb	r3, [r3, #24]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_FLASHEx_Erase+0x1e>
 8001766:	2302      	movs	r3, #2
 8001768:	e058      	b.n	800181c <HAL_FLASHEx_Erase+0xd0>
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <HAL_FLASHEx_Erase+0xd8>)
 800176c:	2201      	movs	r2, #1
 800176e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001770:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001774:	f7ff feaa 	bl	80014cc <FLASH_WaitForLastOperation>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d148      	bne.n	8001814 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d115      	bne.n	80017be <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4619      	mov	r1, r3
 800179e:	4610      	mov	r0, r2
 80017a0:	f000 f844 	bl	800182c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017a8:	f7ff fe90 	bl	80014cc <FLASH_WaitForLastOperation>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80017b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <HAL_FLASHEx_Erase+0xdc>)
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001828 <HAL_FLASHEx_Erase+0xdc>)
 80017b6:	f023 0304 	bic.w	r3, r3, #4
 80017ba:	6113      	str	r3, [r2, #16]
 80017bc:	e028      	b.n	8001810 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	e01c      	b.n	8001800 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4619      	mov	r1, r3
 80017ce:	68b8      	ldr	r0, [r7, #8]
 80017d0:	f000 f850 	bl	8001874 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017d8:	f7ff fe78 	bl	80014cc <FLASH_WaitForLastOperation>
 80017dc:	4603      	mov	r3, r0
 80017de:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_FLASHEx_Erase+0xdc>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	4a10      	ldr	r2, [pc, #64]	@ (8001828 <HAL_FLASHEx_Erase+0xdc>)
 80017e6:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80017ea:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	601a      	str	r2, [r3, #0]
          break;
 80017f8:	e00a      	b.n	8001810 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4413      	add	r3, r2
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d3da      	bcc.n	80017c6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001810:	f000 f878 	bl	8001904 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <HAL_FLASHEx_Erase+0xd8>)
 8001816:	2200      	movs	r2, #0
 8001818:	761a      	strb	r2, [r3, #24]

  return status;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200000c4 	.word	0x200000c4
 8001828:	40023c00 	.word	0x40023c00

0800182c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001838:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <FLASH_MassErase+0x44>)
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4a0c      	ldr	r2, [pc, #48]	@ (8001870 <FLASH_MassErase+0x44>)
 800183e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001842:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001844:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <FLASH_MassErase+0x44>)
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	4a09      	ldr	r2, [pc, #36]	@ (8001870 <FLASH_MassErase+0x44>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <FLASH_MassErase+0x44>)
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	4313      	orrs	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <FLASH_MassErase+0x44>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001860:	6113      	str	r3, [r2, #16]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e010      	b.n	80018b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d103      	bne.n	800189e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001896:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e009      	b.n	80018b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d103      	bne.n	80018ac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80018a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e002      	b.n	80018b2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80018ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	490f      	ldr	r1, [pc, #60]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80018d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4313      	orrs	r3, r2
 80018e0:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <FLASH_Erase_Sector+0x8c>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f2:	6113      	str	r3, [r2, #16]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40023c00 	.word	0x40023c00

08001904 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001908:	4b20      	ldr	r3, [pc, #128]	@ (800198c <FLASH_FlushCaches+0x88>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001910:	2b00      	cmp	r3, #0
 8001912:	d017      	beq.n	8001944 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001914:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <FLASH_FlushCaches+0x88>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <FLASH_FlushCaches+0x88>)
 800191a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800191e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001920:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <FLASH_FlushCaches+0x88>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	@ (800198c <FLASH_FlushCaches+0x88>)
 8001926:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b17      	ldr	r3, [pc, #92]	@ (800198c <FLASH_FlushCaches+0x88>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a16      	ldr	r2, [pc, #88]	@ (800198c <FLASH_FlushCaches+0x88>)
 8001932:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001936:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001938:	4b14      	ldr	r3, [pc, #80]	@ (800198c <FLASH_FlushCaches+0x88>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a13      	ldr	r2, [pc, #76]	@ (800198c <FLASH_FlushCaches+0x88>)
 800193e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001942:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <FLASH_FlushCaches+0x88>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d017      	beq.n	8001980 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001950:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <FLASH_FlushCaches+0x88>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0d      	ldr	r2, [pc, #52]	@ (800198c <FLASH_FlushCaches+0x88>)
 8001956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800195a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <FLASH_FlushCaches+0x88>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <FLASH_FlushCaches+0x88>)
 8001962:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <FLASH_FlushCaches+0x88>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <FLASH_FlushCaches+0x88>)
 800196e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001972:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <FLASH_FlushCaches+0x88>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <FLASH_FlushCaches+0x88>)
 800197a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197e:	6013      	str	r3, [r2, #0]
  }
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	@ 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e159      	b.n	8001c60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f040 8148 	bne.w	8001c5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d005      	beq.n	80019e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d130      	bne.n	8001a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d017      	beq.n	8001a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d123      	bne.n	8001ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a2 	beq.w	8001c5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b57      	ldr	r3, [pc, #348]	@ (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	4a56      	ldr	r2, [pc, #344]	@ (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b26:	4b54      	ldr	r3, [pc, #336]	@ (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b32:	4a52      	ldr	r2, [pc, #328]	@ (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a49      	ldr	r2, [pc, #292]	@ (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x202>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a48      	ldr	r2, [pc, #288]	@ (8001c84 <HAL_GPIO_Init+0x2f4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x1fe>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a47      	ldr	r2, [pc, #284]	@ (8001c88 <HAL_GPIO_Init+0x2f8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x1fa>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a46      	ldr	r2, [pc, #280]	@ (8001c8c <HAL_GPIO_Init+0x2fc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x1f6>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a45      	ldr	r2, [pc, #276]	@ (8001c90 <HAL_GPIO_Init+0x300>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x1f2>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e008      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e004      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b92:	2300      	movs	r3, #0
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f002 0203 	and.w	r2, r2, #3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba4:	4935      	ldr	r1, [pc, #212]	@ (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a24      	ldr	r2, [pc, #144]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c06:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c30:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c54:	4a0f      	ldr	r2, [pc, #60]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f67f aea2 	bls.w	80019ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	@ 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40013c00 	.word	0x40013c00

08001c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e001      	b.n	8001cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e267      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d075      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ce6:	4b88      	ldr	r3, [pc, #544]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d00c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf2:	4b85      	ldr	r3, [pc, #532]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d112      	bne.n	8001d24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfe:	4b82      	ldr	r3, [pc, #520]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d0a:	d10b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d05b      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x108>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d157      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e242      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d2c:	d106      	bne.n	8001d3c <HAL_RCC_OscConfig+0x74>
 8001d2e:	4b76      	ldr	r3, [pc, #472]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a75      	ldr	r2, [pc, #468]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e01d      	b.n	8001d78 <HAL_RCC_OscConfig+0xb0>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x98>
 8001d46:	4b70      	ldr	r3, [pc, #448]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b6d      	ldr	r3, [pc, #436]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a6c      	ldr	r2, [pc, #432]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0xb0>
 8001d60:	4b69      	ldr	r3, [pc, #420]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a68      	ldr	r2, [pc, #416]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b66      	ldr	r3, [pc, #408]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a65      	ldr	r2, [pc, #404]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff f9c2 	bl	8001108 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff f9be 	bl	8001108 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	@ 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e207      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0xc0>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff f9ae 	bl	8001108 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff f9aa 	bl	8001108 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	@ 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1f3      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	4b51      	ldr	r3, [pc, #324]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0xe8>
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d063      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dde:	4b4a      	ldr	r3, [pc, #296]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dea:	4b47      	ldr	r3, [pc, #284]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d11c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df6:	4b44      	ldr	r3, [pc, #272]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d116      	bne.n	8001e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_RCC_OscConfig+0x152>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e1c7      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4937      	ldr	r1, [pc, #220]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	e03a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e38:	4b34      	ldr	r3, [pc, #208]	@ (8001f0c <HAL_RCC_OscConfig+0x244>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f963 	bl	8001108 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e46:	f7ff f95f 	bl	8001108 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e1a8      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	4b2b      	ldr	r3, [pc, #172]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b28      	ldr	r3, [pc, #160]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4925      	ldr	r1, [pc, #148]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_RCC_OscConfig+0x244>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f942 	bl	8001108 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e88:	f7ff f93e 	bl	8001108 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e187      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d036      	beq.n	8001f20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <HAL_RCC_OscConfig+0x248>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7ff f922 	bl	8001108 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f91e 	bl	8001108 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e167      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x200>
 8001ee6:	e01b      	b.n	8001f20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_RCC_OscConfig+0x248>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7ff f90b 	bl	8001108 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	e00e      	b.n	8001f14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7ff f907 	bl	8001108 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d907      	bls.n	8001f14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e150      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	42470000 	.word	0x42470000
 8001f10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	4b88      	ldr	r3, [pc, #544]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ea      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8097 	beq.w	800205c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f32:	4b81      	ldr	r3, [pc, #516]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10f      	bne.n	8001f5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b7d      	ldr	r3, [pc, #500]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	4a7c      	ldr	r2, [pc, #496]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5e:	4b77      	ldr	r3, [pc, #476]	@ (800213c <HAL_RCC_OscConfig+0x474>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6a:	4b74      	ldr	r3, [pc, #464]	@ (800213c <HAL_RCC_OscConfig+0x474>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a73      	ldr	r2, [pc, #460]	@ (800213c <HAL_RCC_OscConfig+0x474>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f76:	f7ff f8c7 	bl	8001108 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7ff f8c3 	bl	8001108 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e10c      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f90:	4b6a      	ldr	r3, [pc, #424]	@ (800213c <HAL_RCC_OscConfig+0x474>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2ea>
 8001fa4:	4b64      	ldr	r3, [pc, #400]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa8:	4a63      	ldr	r2, [pc, #396]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb0:	e01c      	b.n	8001fec <HAL_RCC_OscConfig+0x324>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x30c>
 8001fba:	4b5f      	ldr	r3, [pc, #380]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	4a5b      	ldr	r2, [pc, #364]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0x324>
 8001fd4:	4b58      	ldr	r3, [pc, #352]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd8:	4a57      	ldr	r2, [pc, #348]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe0:	4b55      	ldr	r3, [pc, #340]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe4:	4a54      	ldr	r2, [pc, #336]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d015      	beq.n	8002020 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7ff f888 	bl	8001108 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f884 	bl	8001108 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0cb      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002012:	4b49      	ldr	r3, [pc, #292]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0ee      	beq.n	8001ffc <HAL_RCC_OscConfig+0x334>
 800201e:	e014      	b.n	800204a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7ff f872 	bl	8001108 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7ff f86e 	bl	8001108 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0b5      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203e:	4b3e      	ldr	r3, [pc, #248]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ee      	bne.n	8002028 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002050:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	4a38      	ldr	r2, [pc, #224]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800205a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a1 	beq.w	80021a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002066:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b08      	cmp	r3, #8
 8002070:	d05c      	beq.n	800212c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d141      	bne.n	80020fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_RCC_OscConfig+0x478>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff f842 	bl	8001108 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff f83e 	bl	8001108 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e087      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	019b      	lsls	r3, r3, #6
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	3b01      	subs	r3, #1
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	491b      	ldr	r1, [pc, #108]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_OscConfig+0x478>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff f817 	bl	8001108 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff f813 	bl	8001108 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e05c      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x416>
 80020fc:	e054      	b.n	80021a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_RCC_OscConfig+0x478>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff f800 	bl	8001108 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe fffc 	bl	8001108 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e045      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x444>
 800212a:	e03d      	b.n	80021a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e038      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
 8002138:	40023800 	.word	0x40023800
 800213c:	40007000 	.word	0x40007000
 8002140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002144:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <HAL_RCC_OscConfig+0x4ec>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d028      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d121      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d11a      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002174:	4013      	ands	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800217a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800217c:	4293      	cmp	r3, r2
 800217e:	d111      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	3b01      	subs	r3, #1
 800218e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0cc      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b68      	ldr	r3, [pc, #416]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d90c      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b65      	ldr	r3, [pc, #404]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b63      	ldr	r3, [pc, #396]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800220c:	4b59      	ldr	r3, [pc, #356]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a58      	ldr	r2, [pc, #352]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002224:	4b53      	ldr	r3, [pc, #332]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a52      	ldr	r2, [pc, #328]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800222e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b50      	ldr	r3, [pc, #320]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494d      	ldr	r1, [pc, #308]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d044      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d119      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	2b03      	cmp	r3, #3
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b3f      	ldr	r3, [pc, #252]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e06f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b3b      	ldr	r3, [pc, #236]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e067      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f023 0203 	bic.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4934      	ldr	r1, [pc, #208]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7fe ff2e 	bl	8001108 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7fe ff2a 	bl	8001108 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e04f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 020c 	and.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1eb      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d20c      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e032      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4916      	ldr	r1, [pc, #88]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490e      	ldr	r1, [pc, #56]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233e:	f000 f821 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8002342:	4602      	mov	r2, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	490a      	ldr	r1, [pc, #40]	@ (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	5ccb      	ldrb	r3, [r1, r3]
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	4a09      	ldr	r2, [pc, #36]	@ (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fe8e 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00
 8002374:	40023800 	.word	0x40023800
 8002378:	08002f50 	.word	0x08002f50
 800237c:	20000000 	.word	0x20000000
 8002380:	20000004 	.word	0x20000004

08002384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002388:	b090      	sub	sp, #64	@ 0x40
 800238a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002390:	2300      	movs	r3, #0
 8002392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239c:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x180>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d00d      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x40>
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	f200 80a1 	bhi.w	80024f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x34>
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d003      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x3a>
 80023b6:	e09b      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4b53      	ldr	r3, [pc, #332]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x184>)
 80023ba:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80023bc:	e09b      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023be:	4b53      	ldr	r3, [pc, #332]	@ (800250c <HAL_RCC_GetSysClockFreq+0x188>)
 80023c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023c2:	e098      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x180>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d028      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023da:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x180>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	099b      	lsrs	r3, r3, #6
 80023e0:	2200      	movs	r2, #0
 80023e2:	623b      	str	r3, [r7, #32]
 80023e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023ec:	2100      	movs	r1, #0
 80023ee:	4b47      	ldr	r3, [pc, #284]	@ (800250c <HAL_RCC_GetSysClockFreq+0x188>)
 80023f0:	fb03 f201 	mul.w	r2, r3, r1
 80023f4:	2300      	movs	r3, #0
 80023f6:	fb00 f303 	mul.w	r3, r0, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	4a43      	ldr	r2, [pc, #268]	@ (800250c <HAL_RCC_GetSysClockFreq+0x188>)
 80023fe:	fba0 1202 	umull	r1, r2, r0, r2
 8002402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002404:	460a      	mov	r2, r1
 8002406:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800240a:	4413      	add	r3, r2
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800240e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002410:	2200      	movs	r2, #0
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	61fa      	str	r2, [r7, #28]
 8002416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800241a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800241e:	f7fd fed9 	bl	80001d4 <__aeabi_uldivmod>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4613      	mov	r3, r2
 8002428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800242a:	e053      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242c:	4b35      	ldr	r3, [pc, #212]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x180>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	2200      	movs	r2, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	617a      	str	r2, [r7, #20]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800243e:	f04f 0b00 	mov.w	fp, #0
 8002442:	4652      	mov	r2, sl
 8002444:	465b      	mov	r3, fp
 8002446:	f04f 0000 	mov.w	r0, #0
 800244a:	f04f 0100 	mov.w	r1, #0
 800244e:	0159      	lsls	r1, r3, #5
 8002450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002454:	0150      	lsls	r0, r2, #5
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	ebb2 080a 	subs.w	r8, r2, sl
 800245e:	eb63 090b 	sbc.w	r9, r3, fp
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800246e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002472:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002476:	ebb2 0408 	subs.w	r4, r2, r8
 800247a:	eb63 0509 	sbc.w	r5, r3, r9
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	00eb      	lsls	r3, r5, #3
 8002488:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800248c:	00e2      	lsls	r2, r4, #3
 800248e:	4614      	mov	r4, r2
 8002490:	461d      	mov	r5, r3
 8002492:	eb14 030a 	adds.w	r3, r4, sl
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	eb45 030b 	adc.w	r3, r5, fp
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024aa:	4629      	mov	r1, r5
 80024ac:	028b      	lsls	r3, r1, #10
 80024ae:	4621      	mov	r1, r4
 80024b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b4:	4621      	mov	r1, r4
 80024b6:	028a      	lsls	r2, r1, #10
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024be:	2200      	movs	r2, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	60fa      	str	r2, [r7, #12]
 80024c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024c8:	f7fd fe84 	bl	80001d4 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4613      	mov	r3, r2
 80024d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x180>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80024e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024ee:	e002      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x184>)
 80024f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3740      	adds	r7, #64	@ 0x40
 80024fc:	46bd      	mov	sp, r7
 80024fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	00f42400 	.word	0x00f42400
 800250c:	017d7840 	.word	0x017d7840

08002510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_RCC_GetHCLKFreq+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800252c:	f7ff fff0 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0a9b      	lsrs	r3, r3, #10
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4903      	ldr	r1, [pc, #12]	@ (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	08002f60 	.word	0x08002f60

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002554:	f7ff ffdc 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0b5b      	lsrs	r3, r3, #13
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	@ (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	08002f60 	.word	0x08002f60

08002578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e042      	b.n	8002610 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fc64 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2224      	movs	r2, #36	@ 0x24
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fa09 	bl	80029d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b20      	cmp	r3, #32
 8002636:	d175      	bne.n	8002724 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_UART_Transmit+0x2c>
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e06e      	b.n	8002726 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2221      	movs	r2, #33	@ 0x21
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002656:	f7fe fd57 	bl	8001108 <HAL_GetTick>
 800265a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	88fa      	ldrh	r2, [r7, #6]
 8002660:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	88fa      	ldrh	r2, [r7, #6]
 8002666:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002670:	d108      	bne.n	8002684 <HAL_UART_Transmit+0x6c>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d104      	bne.n	8002684 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	e003      	b.n	800268c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800268c:	e02e      	b.n	80026ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2180      	movs	r1, #128	@ 0x80
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f8df 	bl	800285c <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03a      	b.n	8002726 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10b      	bne.n	80026ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	3302      	adds	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
 80026cc:	e007      	b.n	80026de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3301      	adds	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1cb      	bne.n	800268e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2140      	movs	r1, #64	@ 0x40
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f8ab 	bl	800285c <UART_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e006      	b.n	8002726 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	e000      	b.n	8002726 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002724:	2302      	movs	r3, #2
  }
}
 8002726:	4618      	mov	r0, r3
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b08a      	sub	sp, #40	@ 0x28
 8002732:	af02      	add	r7, sp, #8
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b20      	cmp	r3, #32
 800274c:	f040 8081 	bne.w	8002852 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_UART_Receive+0x2e>
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e079      	b.n	8002854 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2222      	movs	r2, #34	@ 0x22
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002774:	f7fe fcc8 	bl	8001108 <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800278e:	d108      	bne.n	80027a2 <HAL_UART_Receive+0x74>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d104      	bne.n	80027a2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e003      	b.n	80027aa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027aa:	e047      	b.n	800283c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2120      	movs	r1, #32
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f850 	bl	800285c <UART_WaitOnFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e042      	b.n	8002854 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	3302      	adds	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	e01f      	b.n	800282e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f6:	d007      	beq.n	8002808 <HAL_UART_Receive+0xda>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_UART_Receive+0xe8>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e008      	b.n	8002828 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002822:	b2da      	uxtb	r2, r3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1b2      	bne.n	80027ac <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800286c:	e03b      	b.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d037      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7fe fc47 	bl	8001108 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <UART_WaitOnFlagUntilTimeout+0x30>
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e03a      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d023      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b80      	cmp	r3, #128	@ 0x80
 80028a2:	d020      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b40      	cmp	r3, #64	@ 0x40
 80028a8:	d01d      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d116      	bne.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f81d 	bl	800290e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2208      	movs	r2, #8
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00f      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	429a      	cmp	r2, r3
 8002902:	d0b4      	beq.n	800286e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800290e:	b480      	push	{r7}
 8002910:	b095      	sub	sp, #84	@ 0x54
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	330c      	adds	r3, #12
 800291c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002920:	e853 3f00 	ldrex	r3, [r3]
 8002924:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800292c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002936:	643a      	str	r2, [r7, #64]	@ 0x40
 8002938:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800293c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800293e:	e841 2300 	strex	r3, r2, [r1]
 8002942:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e5      	bne.n	8002916 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3314      	adds	r3, #20
 8002950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	e853 3f00 	ldrex	r3, [r3]
 8002958:	61fb      	str	r3, [r7, #28]
   return(result);
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3314      	adds	r3, #20
 8002968:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800296a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800296c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002972:	e841 2300 	strex	r3, r2, [r1]
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e5      	bne.n	800294a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	2b01      	cmp	r3, #1
 8002984:	d119      	bne.n	80029ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	60bb      	str	r3, [r7, #8]
   return(result);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f023 0310 	bic.w	r3, r3, #16
 800299c:	647b      	str	r3, [r7, #68]	@ 0x44
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	330c      	adds	r3, #12
 80029a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029a6:	61ba      	str	r2, [r7, #24]
 80029a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029aa:	6979      	ldr	r1, [r7, #20]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	613b      	str	r3, [r7, #16]
   return(result);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e5      	bne.n	8002986 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029c8:	bf00      	nop
 80029ca:	3754      	adds	r7, #84	@ 0x54
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d8:	b0c0      	sub	sp, #256	@ 0x100
 80029da:	af00      	add	r7, sp, #0
 80029dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f0:	68d9      	ldr	r1, [r3, #12]
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	ea40 0301 	orr.w	r3, r0, r1
 80029fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a2c:	f021 010c 	bic.w	r1, r1, #12
 8002a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4e:	6999      	ldr	r1, [r3, #24]
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	ea40 0301 	orr.w	r3, r0, r1
 8002a5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b8f      	ldr	r3, [pc, #572]	@ (8002ca0 <UART_SetConfig+0x2cc>)
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d005      	beq.n	8002a74 <UART_SetConfig+0xa0>
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ca4 <UART_SetConfig+0x2d0>)
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d104      	bne.n	8002a7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a74:	f7ff fd6c 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8002a78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a7c:	e003      	b.n	8002a86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a7e:	f7ff fd53 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8002a82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a90:	f040 810c 	bne.w	8002cac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002aa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	1891      	adds	r1, r2, r2
 8002aac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002aae:	415b      	adcs	r3, r3
 8002ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ab2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	eb12 0801 	adds.w	r8, r2, r1
 8002abc:	4629      	mov	r1, r5
 8002abe:	eb43 0901 	adc.w	r9, r3, r1
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ad6:	4690      	mov	r8, r2
 8002ad8:	4699      	mov	r9, r3
 8002ada:	4623      	mov	r3, r4
 8002adc:	eb18 0303 	adds.w	r3, r8, r3
 8002ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	eb49 0303 	adc.w	r3, r9, r3
 8002aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002afa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002afe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b02:	460b      	mov	r3, r1
 8002b04:	18db      	adds	r3, r3, r3
 8002b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b08:	4613      	mov	r3, r2
 8002b0a:	eb42 0303 	adc.w	r3, r2, r3
 8002b0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b18:	f7fd fb5c 	bl	80001d4 <__aeabi_uldivmod>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4b61      	ldr	r3, [pc, #388]	@ (8002ca8 <UART_SetConfig+0x2d4>)
 8002b22:	fba3 2302 	umull	r2, r3, r3, r2
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	011c      	lsls	r4, r3, #4
 8002b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	1891      	adds	r1, r2, r2
 8002b42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b44:	415b      	adcs	r3, r3
 8002b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b52:	4649      	mov	r1, r9
 8002b54:	eb43 0b01 	adc.w	fp, r3, r1
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b6c:	4692      	mov	sl, r2
 8002b6e:	469b      	mov	fp, r3
 8002b70:	4643      	mov	r3, r8
 8002b72:	eb1a 0303 	adds.w	r3, sl, r3
 8002b76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002b80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	18db      	adds	r3, r3, r3
 8002b9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	eb42 0303 	adc.w	r3, r2, r3
 8002ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002baa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bae:	f7fd fb11 	bl	80001d4 <__aeabi_uldivmod>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <UART_SetConfig+0x2d4>)
 8002bba:	fba3 2301 	umull	r2, r3, r3, r1
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2264      	movs	r2, #100	@ 0x64
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	1acb      	subs	r3, r1, r3
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bce:	4b36      	ldr	r3, [pc, #216]	@ (8002ca8 <UART_SetConfig+0x2d4>)
 8002bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002bdc:	441c      	add	r4, r3
 8002bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002be8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	1891      	adds	r1, r2, r2
 8002bf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bf8:	415b      	adcs	r3, r3
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c00:	4641      	mov	r1, r8
 8002c02:	1851      	adds	r1, r2, r1
 8002c04:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c06:	4649      	mov	r1, r9
 8002c08:	414b      	adcs	r3, r1
 8002c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c18:	4659      	mov	r1, fp
 8002c1a:	00cb      	lsls	r3, r1, #3
 8002c1c:	4651      	mov	r1, sl
 8002c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c22:	4651      	mov	r1, sl
 8002c24:	00ca      	lsls	r2, r1, #3
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4642      	mov	r2, r8
 8002c2e:	189b      	adds	r3, r3, r2
 8002c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c34:	464b      	mov	r3, r9
 8002c36:	460a      	mov	r2, r1
 8002c38:	eb42 0303 	adc.w	r3, r2, r3
 8002c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c54:	460b      	mov	r3, r1
 8002c56:	18db      	adds	r3, r3, r3
 8002c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	eb42 0303 	adc.w	r3, r2, r3
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c6a:	f7fd fab3 	bl	80001d4 <__aeabi_uldivmod>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <UART_SetConfig+0x2d4>)
 8002c74:	fba3 1302 	umull	r1, r3, r3, r2
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	2164      	movs	r1, #100	@ 0x64
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	3332      	adds	r3, #50	@ 0x32
 8002c86:	4a08      	ldr	r2, [pc, #32]	@ (8002ca8 <UART_SetConfig+0x2d4>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	f003 0207 	and.w	r2, r3, #7
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4422      	add	r2, r4
 8002c9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c9c:	e106      	b.n	8002eac <UART_SetConfig+0x4d8>
 8002c9e:	bf00      	nop
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	40011400 	.word	0x40011400
 8002ca8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002cba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002cbe:	4642      	mov	r2, r8
 8002cc0:	464b      	mov	r3, r9
 8002cc2:	1891      	adds	r1, r2, r2
 8002cc4:	6239      	str	r1, [r7, #32]
 8002cc6:	415b      	adcs	r3, r3
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cce:	4641      	mov	r1, r8
 8002cd0:	1854      	adds	r4, r2, r1
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	eb43 0501 	adc.w	r5, r3, r1
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	00eb      	lsls	r3, r5, #3
 8002ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce6:	00e2      	lsls	r2, r4, #3
 8002ce8:	4614      	mov	r4, r2
 8002cea:	461d      	mov	r5, r3
 8002cec:	4643      	mov	r3, r8
 8002cee:	18e3      	adds	r3, r4, r3
 8002cf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cf4:	464b      	mov	r3, r9
 8002cf6:	eb45 0303 	adc.w	r3, r5, r3
 8002cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	008b      	lsls	r3, r1, #2
 8002d1e:	4621      	mov	r1, r4
 8002d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d24:	4621      	mov	r1, r4
 8002d26:	008a      	lsls	r2, r1, #2
 8002d28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d2c:	f7fd fa52 	bl	80001d4 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4b60      	ldr	r3, [pc, #384]	@ (8002eb8 <UART_SetConfig+0x4e4>)
 8002d36:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	011c      	lsls	r4, r3, #4
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	61b9      	str	r1, [r7, #24]
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d60:	4641      	mov	r1, r8
 8002d62:	1851      	adds	r1, r2, r1
 8002d64:	6139      	str	r1, [r7, #16]
 8002d66:	4649      	mov	r1, r9
 8002d68:	414b      	adcs	r3, r1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d78:	4659      	mov	r1, fp
 8002d7a:	00cb      	lsls	r3, r1, #3
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d82:	4651      	mov	r1, sl
 8002d84:	00ca      	lsls	r2, r1, #3
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d94:	464b      	mov	r3, r9
 8002d96:	460a      	mov	r2, r1
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002daa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002db8:	4649      	mov	r1, r9
 8002dba:	008b      	lsls	r3, r1, #2
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc2:	4641      	mov	r1, r8
 8002dc4:	008a      	lsls	r2, r1, #2
 8002dc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002dca:	f7fd fa03 	bl	80001d4 <__aeabi_uldivmod>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4b38      	ldr	r3, [pc, #224]	@ (8002eb8 <UART_SetConfig+0x4e4>)
 8002dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2264      	movs	r2, #100	@ 0x64
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	1acb      	subs	r3, r1, r3
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	3332      	adds	r3, #50	@ 0x32
 8002de8:	4a33      	ldr	r2, [pc, #204]	@ (8002eb8 <UART_SetConfig+0x4e4>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df4:	441c      	add	r4, r3
 8002df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	1891      	adds	r1, r2, r2
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	415b      	adcs	r3, r3
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e14:	4641      	mov	r1, r8
 8002e16:	1851      	adds	r1, r2, r1
 8002e18:	6039      	str	r1, [r7, #0]
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	414b      	adcs	r3, r1
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	00cb      	lsls	r3, r1, #3
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e36:	4651      	mov	r1, sl
 8002e38:	00ca      	lsls	r2, r1, #3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4642      	mov	r2, r8
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e46:	464b      	mov	r3, r9
 8002e48:	460a      	mov	r2, r1
 8002e4a:	eb42 0303 	adc.w	r3, r2, r3
 8002e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e68:	4649      	mov	r1, r9
 8002e6a:	008b      	lsls	r3, r1, #2
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e72:	4641      	mov	r1, r8
 8002e74:	008a      	lsls	r2, r1, #2
 8002e76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e7a:	f7fd f9ab 	bl	80001d4 <__aeabi_uldivmod>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <UART_SetConfig+0x4e4>)
 8002e84:	fba3 1302 	umull	r1, r3, r3, r2
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	2164      	movs	r1, #100	@ 0x64
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	3332      	adds	r3, #50	@ 0x32
 8002e96:	4a08      	ldr	r2, [pc, #32]	@ (8002eb8 <UART_SetConfig+0x4e4>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	f003 020f 	and.w	r2, r3, #15
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4422      	add	r2, r4
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb8:	51eb851f 	.word	0x51eb851f

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4d0d      	ldr	r5, [pc, #52]	@ (8002f04 <__libc_init_array+0x38>)
 8002ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8002f08 <__libc_init_array+0x3c>)
 8002ed2:	1b64      	subs	r4, r4, r5
 8002ed4:	10a4      	asrs	r4, r4, #2
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	42a6      	cmp	r6, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	4d0b      	ldr	r5, [pc, #44]	@ (8002f0c <__libc_init_array+0x40>)
 8002ede:	4c0c      	ldr	r4, [pc, #48]	@ (8002f10 <__libc_init_array+0x44>)
 8002ee0:	f000 f818 	bl	8002f14 <_init>
 8002ee4:	1b64      	subs	r4, r4, r5
 8002ee6:	10a4      	asrs	r4, r4, #2
 8002ee8:	2600      	movs	r6, #0
 8002eea:	42a6      	cmp	r6, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef4:	4798      	blx	r3
 8002ef6:	3601      	adds	r6, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efe:	4798      	blx	r3
 8002f00:	3601      	adds	r6, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	08002f70 	.word	0x08002f70
 8002f08:	08002f70 	.word	0x08002f70
 8002f0c:	08002f70 	.word	0x08002f70
 8002f10:	08002f74 	.word	0x08002f74

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
