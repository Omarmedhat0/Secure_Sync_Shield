
APP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d74  08008194  08008194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800af08  0800af08  00003f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af20  0800af20  00005004  2**0
                  CONTENTS
  4 .ARM          00000008  0800af20  0800af20  00003f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af28  0800af28  00005004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af28  0800af28  00003f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af2c  0800af2c  00003f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800af30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  0800af3c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800af3c  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY
 12 .shared       00000004  08010000  08010000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 13 .debug_info   00009125  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b37  00000000  00000000  0000e159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0000fc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063d  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014bf9  00000000  00000000  00010afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f15  00000000  00000000  000256f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081921  00000000  00000000  0002f60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b0f2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002068  00000000  00000000  000b0f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000b2fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008194 <__do_global_dtors_aux>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4c05      	ldr	r4, [pc, #20]	@ (80081ac <__do_global_dtors_aux+0x18>)
 8008198:	7823      	ldrb	r3, [r4, #0]
 800819a:	b933      	cbnz	r3, 80081aa <__do_global_dtors_aux+0x16>
 800819c:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <__do_global_dtors_aux+0x1c>)
 800819e:	b113      	cbz	r3, 80081a6 <__do_global_dtors_aux+0x12>
 80081a0:	4804      	ldr	r0, [pc, #16]	@ (80081b4 <__do_global_dtors_aux+0x20>)
 80081a2:	f3af 8000 	nop.w
 80081a6:	2301      	movs	r3, #1
 80081a8:	7023      	strb	r3, [r4, #0]
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	2000000c 	.word	0x2000000c
 80081b0:	00000000 	.word	0x00000000
 80081b4:	0800aef0 	.word	0x0800aef0

080081b8 <frame_dummy>:
 80081b8:	b508      	push	{r3, lr}
 80081ba:	4b03      	ldr	r3, [pc, #12]	@ (80081c8 <frame_dummy+0x10>)
 80081bc:	b11b      	cbz	r3, 80081c6 <frame_dummy+0xe>
 80081be:	4903      	ldr	r1, [pc, #12]	@ (80081cc <frame_dummy+0x14>)
 80081c0:	4803      	ldr	r0, [pc, #12]	@ (80081d0 <frame_dummy+0x18>)
 80081c2:	f3af 8000 	nop.w
 80081c6:	bd08      	pop	{r3, pc}
 80081c8:	00000000 	.word	0x00000000
 80081cc:	20000010 	.word	0x20000010
 80081d0:	0800aef0 	.word	0x0800aef0

080081d4 <__aeabi_uldivmod>:
 80081d4:	b953      	cbnz	r3, 80081ec <__aeabi_uldivmod+0x18>
 80081d6:	b94a      	cbnz	r2, 80081ec <__aeabi_uldivmod+0x18>
 80081d8:	2900      	cmp	r1, #0
 80081da:	bf08      	it	eq
 80081dc:	2800      	cmpeq	r0, #0
 80081de:	bf1c      	itt	ne
 80081e0:	f04f 31ff 	movne.w	r1, #4294967295
 80081e4:	f04f 30ff 	movne.w	r0, #4294967295
 80081e8:	f000 b96a 	b.w	80084c0 <__aeabi_idiv0>
 80081ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80081f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081f4:	f000 f806 	bl	8008204 <__udivmoddi4>
 80081f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008200:	b004      	add	sp, #16
 8008202:	4770      	bx	lr

08008204 <__udivmoddi4>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	9d08      	ldr	r5, [sp, #32]
 800820a:	460c      	mov	r4, r1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d14e      	bne.n	80082ae <__udivmoddi4+0xaa>
 8008210:	4694      	mov	ip, r2
 8008212:	458c      	cmp	ip, r1
 8008214:	4686      	mov	lr, r0
 8008216:	fab2 f282 	clz	r2, r2
 800821a:	d962      	bls.n	80082e2 <__udivmoddi4+0xde>
 800821c:	b14a      	cbz	r2, 8008232 <__udivmoddi4+0x2e>
 800821e:	f1c2 0320 	rsb	r3, r2, #32
 8008222:	4091      	lsls	r1, r2
 8008224:	fa20 f303 	lsr.w	r3, r0, r3
 8008228:	fa0c fc02 	lsl.w	ip, ip, r2
 800822c:	4319      	orrs	r1, r3
 800822e:	fa00 fe02 	lsl.w	lr, r0, r2
 8008232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008236:	fa1f f68c 	uxth.w	r6, ip
 800823a:	fbb1 f4f7 	udiv	r4, r1, r7
 800823e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008242:	fb07 1114 	mls	r1, r7, r4, r1
 8008246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800824a:	fb04 f106 	mul.w	r1, r4, r6
 800824e:	4299      	cmp	r1, r3
 8008250:	d90a      	bls.n	8008268 <__udivmoddi4+0x64>
 8008252:	eb1c 0303 	adds.w	r3, ip, r3
 8008256:	f104 30ff 	add.w	r0, r4, #4294967295
 800825a:	f080 8112 	bcs.w	8008482 <__udivmoddi4+0x27e>
 800825e:	4299      	cmp	r1, r3
 8008260:	f240 810f 	bls.w	8008482 <__udivmoddi4+0x27e>
 8008264:	3c02      	subs	r4, #2
 8008266:	4463      	add	r3, ip
 8008268:	1a59      	subs	r1, r3, r1
 800826a:	fa1f f38e 	uxth.w	r3, lr
 800826e:	fbb1 f0f7 	udiv	r0, r1, r7
 8008272:	fb07 1110 	mls	r1, r7, r0, r1
 8008276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800827a:	fb00 f606 	mul.w	r6, r0, r6
 800827e:	429e      	cmp	r6, r3
 8008280:	d90a      	bls.n	8008298 <__udivmoddi4+0x94>
 8008282:	eb1c 0303 	adds.w	r3, ip, r3
 8008286:	f100 31ff 	add.w	r1, r0, #4294967295
 800828a:	f080 80fc 	bcs.w	8008486 <__udivmoddi4+0x282>
 800828e:	429e      	cmp	r6, r3
 8008290:	f240 80f9 	bls.w	8008486 <__udivmoddi4+0x282>
 8008294:	4463      	add	r3, ip
 8008296:	3802      	subs	r0, #2
 8008298:	1b9b      	subs	r3, r3, r6
 800829a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800829e:	2100      	movs	r1, #0
 80082a0:	b11d      	cbz	r5, 80082aa <__udivmoddi4+0xa6>
 80082a2:	40d3      	lsrs	r3, r2
 80082a4:	2200      	movs	r2, #0
 80082a6:	e9c5 3200 	strd	r3, r2, [r5]
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ae:	428b      	cmp	r3, r1
 80082b0:	d905      	bls.n	80082be <__udivmoddi4+0xba>
 80082b2:	b10d      	cbz	r5, 80082b8 <__udivmoddi4+0xb4>
 80082b4:	e9c5 0100 	strd	r0, r1, [r5]
 80082b8:	2100      	movs	r1, #0
 80082ba:	4608      	mov	r0, r1
 80082bc:	e7f5      	b.n	80082aa <__udivmoddi4+0xa6>
 80082be:	fab3 f183 	clz	r1, r3
 80082c2:	2900      	cmp	r1, #0
 80082c4:	d146      	bne.n	8008354 <__udivmoddi4+0x150>
 80082c6:	42a3      	cmp	r3, r4
 80082c8:	d302      	bcc.n	80082d0 <__udivmoddi4+0xcc>
 80082ca:	4290      	cmp	r0, r2
 80082cc:	f0c0 80f0 	bcc.w	80084b0 <__udivmoddi4+0x2ac>
 80082d0:	1a86      	subs	r6, r0, r2
 80082d2:	eb64 0303 	sbc.w	r3, r4, r3
 80082d6:	2001      	movs	r0, #1
 80082d8:	2d00      	cmp	r5, #0
 80082da:	d0e6      	beq.n	80082aa <__udivmoddi4+0xa6>
 80082dc:	e9c5 6300 	strd	r6, r3, [r5]
 80082e0:	e7e3      	b.n	80082aa <__udivmoddi4+0xa6>
 80082e2:	2a00      	cmp	r2, #0
 80082e4:	f040 8090 	bne.w	8008408 <__udivmoddi4+0x204>
 80082e8:	eba1 040c 	sub.w	r4, r1, ip
 80082ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80082f0:	fa1f f78c 	uxth.w	r7, ip
 80082f4:	2101      	movs	r1, #1
 80082f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80082fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80082fe:	fb08 4416 	mls	r4, r8, r6, r4
 8008302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008306:	fb07 f006 	mul.w	r0, r7, r6
 800830a:	4298      	cmp	r0, r3
 800830c:	d908      	bls.n	8008320 <__udivmoddi4+0x11c>
 800830e:	eb1c 0303 	adds.w	r3, ip, r3
 8008312:	f106 34ff 	add.w	r4, r6, #4294967295
 8008316:	d202      	bcs.n	800831e <__udivmoddi4+0x11a>
 8008318:	4298      	cmp	r0, r3
 800831a:	f200 80cd 	bhi.w	80084b8 <__udivmoddi4+0x2b4>
 800831e:	4626      	mov	r6, r4
 8008320:	1a1c      	subs	r4, r3, r0
 8008322:	fa1f f38e 	uxth.w	r3, lr
 8008326:	fbb4 f0f8 	udiv	r0, r4, r8
 800832a:	fb08 4410 	mls	r4, r8, r0, r4
 800832e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008332:	fb00 f707 	mul.w	r7, r0, r7
 8008336:	429f      	cmp	r7, r3
 8008338:	d908      	bls.n	800834c <__udivmoddi4+0x148>
 800833a:	eb1c 0303 	adds.w	r3, ip, r3
 800833e:	f100 34ff 	add.w	r4, r0, #4294967295
 8008342:	d202      	bcs.n	800834a <__udivmoddi4+0x146>
 8008344:	429f      	cmp	r7, r3
 8008346:	f200 80b0 	bhi.w	80084aa <__udivmoddi4+0x2a6>
 800834a:	4620      	mov	r0, r4
 800834c:	1bdb      	subs	r3, r3, r7
 800834e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008352:	e7a5      	b.n	80082a0 <__udivmoddi4+0x9c>
 8008354:	f1c1 0620 	rsb	r6, r1, #32
 8008358:	408b      	lsls	r3, r1
 800835a:	fa22 f706 	lsr.w	r7, r2, r6
 800835e:	431f      	orrs	r7, r3
 8008360:	fa20 fc06 	lsr.w	ip, r0, r6
 8008364:	fa04 f301 	lsl.w	r3, r4, r1
 8008368:	ea43 030c 	orr.w	r3, r3, ip
 800836c:	40f4      	lsrs	r4, r6
 800836e:	fa00 f801 	lsl.w	r8, r0, r1
 8008372:	0c38      	lsrs	r0, r7, #16
 8008374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008378:	fbb4 fef0 	udiv	lr, r4, r0
 800837c:	fa1f fc87 	uxth.w	ip, r7
 8008380:	fb00 441e 	mls	r4, r0, lr, r4
 8008384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008388:	fb0e f90c 	mul.w	r9, lr, ip
 800838c:	45a1      	cmp	r9, r4
 800838e:	fa02 f201 	lsl.w	r2, r2, r1
 8008392:	d90a      	bls.n	80083aa <__udivmoddi4+0x1a6>
 8008394:	193c      	adds	r4, r7, r4
 8008396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800839a:	f080 8084 	bcs.w	80084a6 <__udivmoddi4+0x2a2>
 800839e:	45a1      	cmp	r9, r4
 80083a0:	f240 8081 	bls.w	80084a6 <__udivmoddi4+0x2a2>
 80083a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80083a8:	443c      	add	r4, r7
 80083aa:	eba4 0409 	sub.w	r4, r4, r9
 80083ae:	fa1f f983 	uxth.w	r9, r3
 80083b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80083b6:	fb00 4413 	mls	r4, r0, r3, r4
 80083ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80083be:	fb03 fc0c 	mul.w	ip, r3, ip
 80083c2:	45a4      	cmp	ip, r4
 80083c4:	d907      	bls.n	80083d6 <__udivmoddi4+0x1d2>
 80083c6:	193c      	adds	r4, r7, r4
 80083c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80083cc:	d267      	bcs.n	800849e <__udivmoddi4+0x29a>
 80083ce:	45a4      	cmp	ip, r4
 80083d0:	d965      	bls.n	800849e <__udivmoddi4+0x29a>
 80083d2:	3b02      	subs	r3, #2
 80083d4:	443c      	add	r4, r7
 80083d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80083da:	fba0 9302 	umull	r9, r3, r0, r2
 80083de:	eba4 040c 	sub.w	r4, r4, ip
 80083e2:	429c      	cmp	r4, r3
 80083e4:	46ce      	mov	lr, r9
 80083e6:	469c      	mov	ip, r3
 80083e8:	d351      	bcc.n	800848e <__udivmoddi4+0x28a>
 80083ea:	d04e      	beq.n	800848a <__udivmoddi4+0x286>
 80083ec:	b155      	cbz	r5, 8008404 <__udivmoddi4+0x200>
 80083ee:	ebb8 030e 	subs.w	r3, r8, lr
 80083f2:	eb64 040c 	sbc.w	r4, r4, ip
 80083f6:	fa04 f606 	lsl.w	r6, r4, r6
 80083fa:	40cb      	lsrs	r3, r1
 80083fc:	431e      	orrs	r6, r3
 80083fe:	40cc      	lsrs	r4, r1
 8008400:	e9c5 6400 	strd	r6, r4, [r5]
 8008404:	2100      	movs	r1, #0
 8008406:	e750      	b.n	80082aa <__udivmoddi4+0xa6>
 8008408:	f1c2 0320 	rsb	r3, r2, #32
 800840c:	fa20 f103 	lsr.w	r1, r0, r3
 8008410:	fa0c fc02 	lsl.w	ip, ip, r2
 8008414:	fa24 f303 	lsr.w	r3, r4, r3
 8008418:	4094      	lsls	r4, r2
 800841a:	430c      	orrs	r4, r1
 800841c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008420:	fa00 fe02 	lsl.w	lr, r0, r2
 8008424:	fa1f f78c 	uxth.w	r7, ip
 8008428:	fbb3 f0f8 	udiv	r0, r3, r8
 800842c:	fb08 3110 	mls	r1, r8, r0, r3
 8008430:	0c23      	lsrs	r3, r4, #16
 8008432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008436:	fb00 f107 	mul.w	r1, r0, r7
 800843a:	4299      	cmp	r1, r3
 800843c:	d908      	bls.n	8008450 <__udivmoddi4+0x24c>
 800843e:	eb1c 0303 	adds.w	r3, ip, r3
 8008442:	f100 36ff 	add.w	r6, r0, #4294967295
 8008446:	d22c      	bcs.n	80084a2 <__udivmoddi4+0x29e>
 8008448:	4299      	cmp	r1, r3
 800844a:	d92a      	bls.n	80084a2 <__udivmoddi4+0x29e>
 800844c:	3802      	subs	r0, #2
 800844e:	4463      	add	r3, ip
 8008450:	1a5b      	subs	r3, r3, r1
 8008452:	b2a4      	uxth	r4, r4
 8008454:	fbb3 f1f8 	udiv	r1, r3, r8
 8008458:	fb08 3311 	mls	r3, r8, r1, r3
 800845c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008460:	fb01 f307 	mul.w	r3, r1, r7
 8008464:	42a3      	cmp	r3, r4
 8008466:	d908      	bls.n	800847a <__udivmoddi4+0x276>
 8008468:	eb1c 0404 	adds.w	r4, ip, r4
 800846c:	f101 36ff 	add.w	r6, r1, #4294967295
 8008470:	d213      	bcs.n	800849a <__udivmoddi4+0x296>
 8008472:	42a3      	cmp	r3, r4
 8008474:	d911      	bls.n	800849a <__udivmoddi4+0x296>
 8008476:	3902      	subs	r1, #2
 8008478:	4464      	add	r4, ip
 800847a:	1ae4      	subs	r4, r4, r3
 800847c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008480:	e739      	b.n	80082f6 <__udivmoddi4+0xf2>
 8008482:	4604      	mov	r4, r0
 8008484:	e6f0      	b.n	8008268 <__udivmoddi4+0x64>
 8008486:	4608      	mov	r0, r1
 8008488:	e706      	b.n	8008298 <__udivmoddi4+0x94>
 800848a:	45c8      	cmp	r8, r9
 800848c:	d2ae      	bcs.n	80083ec <__udivmoddi4+0x1e8>
 800848e:	ebb9 0e02 	subs.w	lr, r9, r2
 8008492:	eb63 0c07 	sbc.w	ip, r3, r7
 8008496:	3801      	subs	r0, #1
 8008498:	e7a8      	b.n	80083ec <__udivmoddi4+0x1e8>
 800849a:	4631      	mov	r1, r6
 800849c:	e7ed      	b.n	800847a <__udivmoddi4+0x276>
 800849e:	4603      	mov	r3, r0
 80084a0:	e799      	b.n	80083d6 <__udivmoddi4+0x1d2>
 80084a2:	4630      	mov	r0, r6
 80084a4:	e7d4      	b.n	8008450 <__udivmoddi4+0x24c>
 80084a6:	46d6      	mov	lr, sl
 80084a8:	e77f      	b.n	80083aa <__udivmoddi4+0x1a6>
 80084aa:	4463      	add	r3, ip
 80084ac:	3802      	subs	r0, #2
 80084ae:	e74d      	b.n	800834c <__udivmoddi4+0x148>
 80084b0:	4606      	mov	r6, r0
 80084b2:	4623      	mov	r3, r4
 80084b4:	4608      	mov	r0, r1
 80084b6:	e70f      	b.n	80082d8 <__udivmoddi4+0xd4>
 80084b8:	3e02      	subs	r6, #2
 80084ba:	4463      	add	r3, ip
 80084bc:	e730      	b.n	8008320 <__udivmoddi4+0x11c>
 80084be:	bf00      	nop

080084c0 <__aeabi_idiv0>:
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop

080084c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80084c8:	f3bf 8f4f 	dsb	sy
}
 80084cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80084ce:	4b06      	ldr	r3, [pc, #24]	@ (80084e8 <__NVIC_SystemReset+0x24>)
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80084d6:	4904      	ldr	r1, [pc, #16]	@ (80084e8 <__NVIC_SystemReset+0x24>)
 80084d8:	4b04      	ldr	r3, [pc, #16]	@ (80084ec <__NVIC_SystemReset+0x28>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80084de:	f3bf 8f4f 	dsb	sy
}
 80084e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80084e4:	bf00      	nop
 80084e6:	e7fd      	b.n	80084e4 <__NVIC_SystemReset+0x20>
 80084e8:	e000ed00 	.word	0xe000ed00
 80084ec:	05fa0004 	.word	0x05fa0004

080084f0 <Flash_Write_Data>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Flash_Write_Data(uint32_t StartSectorAddress, uint8_t *Data, uint16_t numberofbytes)
{
 80084f0:	b5b0      	push	{r4, r5, r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4613      	mov	r3, r2
 80084fc:	80fb      	strh	r3, [r7, #6]
    static FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;
    HAL_FLASH_Unlock();
 80084fe:	f000 fccd 	bl	8008e9c <HAL_FLASH_Unlock>

    /* Erase the sector before writing */
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8008502:	4b1c      	ldr	r3, [pc, #112]	@ (8008574 <Flash_Write_Data+0x84>)
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8008508:	4b1a      	ldr	r3, [pc, #104]	@ (8008574 <Flash_Write_Data+0x84>)
 800850a:	2202      	movs	r2, #2
 800850c:	611a      	str	r2, [r3, #16]
    EraseInitStruct.Sector = FLASH_SECTOR_4; //!! Make it Configurable
 800850e:	4b19      	ldr	r3, [pc, #100]	@ (8008574 <Flash_Write_Data+0x84>)
 8008510:	2204      	movs	r2, #4
 8008512:	609a      	str	r2, [r3, #8]
    EraseInitStruct.NbSectors = 1;
 8008514:	4b17      	ldr	r3, [pc, #92]	@ (8008574 <Flash_Write_Data+0x84>)
 8008516:	2201      	movs	r2, #1
 8008518:	60da      	str	r2, [r3, #12]
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 800851a:	f107 0310 	add.w	r3, r7, #16
 800851e:	4619      	mov	r1, r3
 8008520:	4814      	ldr	r0, [pc, #80]	@ (8008574 <Flash_Write_Data+0x84>)
 8008522:	f000 fe2d 	bl	8009180 <HAL_FLASHEx_Erase>
    {
        // Handle error
    }

    /* Program the user Flash area word by word */
    for (uint16_t i = 0; i < numberofbytes; i++)
 8008526:	2300      	movs	r3, #0
 8008528:	82fb      	strh	r3, [r7, #22]
 800852a:	e016      	b.n	800855a <Flash_Write_Data+0x6a>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, StartSectorAddress, Data[i]) == HAL_OK)
 800852c:	8afb      	ldrh	r3, [r7, #22]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	4413      	add	r3, r2
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2200      	movs	r2, #0
 8008538:	461c      	mov	r4, r3
 800853a:	4615      	mov	r5, r2
 800853c:	4622      	mov	r2, r4
 800853e:	462b      	mov	r3, r5
 8008540:	68f9      	ldr	r1, [r7, #12]
 8008542:	2000      	movs	r0, #0
 8008544:	f000 fc56 	bl	8008df4 <HAL_FLASH_Program>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <Flash_Write_Data+0x74>
        {
            StartSectorAddress ++;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < numberofbytes; i++)
 8008554:	8afb      	ldrh	r3, [r7, #22]
 8008556:	3301      	adds	r3, #1
 8008558:	82fb      	strh	r3, [r7, #22]
 800855a:	8afa      	ldrh	r2, [r7, #22]
 800855c:	88fb      	ldrh	r3, [r7, #6]
 800855e:	429a      	cmp	r2, r3
 8008560:	d3e4      	bcc.n	800852c <Flash_Write_Data+0x3c>
 8008562:	e000      	b.n	8008566 <Flash_Write_Data+0x76>
        }
        else
        {
            break;
 8008564:	bf00      	nop
        }
    }

    HAL_FLASH_Lock();
 8008566:	f000 fcbb 	bl	8008ee0 <HAL_FLASH_Lock>
}
 800856a:	bf00      	nop
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bdb0      	pop	{r4, r5, r7, pc}
 8008572:	bf00      	nop
 8008574:	20000074 	.word	0x20000074

08008578 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a0b      	ldr	r2, [pc, #44]	@ (80085b4 <HAL_UART_RxCpltCallback+0x3c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d10f      	bne.n	80085aa <HAL_UART_RxCpltCallback+0x32>
	{
		// Assuming data is received into the 'data' variable
		HAL_UART_Receive_IT(&huart2, &data, 1);
 800858a:	2201      	movs	r2, #1
 800858c:	490a      	ldr	r1, [pc, #40]	@ (80085b8 <HAL_UART_RxCpltCallback+0x40>)
 800858e:	480b      	ldr	r0, [pc, #44]	@ (80085bc <HAL_UART_RxCpltCallback+0x44>)
 8008590:	f001 fd5e 	bl	800a050 <HAL_UART_Receive_IT>

		if(data == 'c') // flashing request
 8008594:	4b08      	ldr	r3, [pc, #32]	@ (80085b8 <HAL_UART_RxCpltCallback+0x40>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b63      	cmp	r3, #99	@ 0x63
 800859a:	d106      	bne.n	80085aa <HAL_UART_RxCpltCallback+0x32>
		{

			// Unlock the Flash to enable the flash control register access
			//HAL_FLASH_Unlock();

			Flash_Write_Data(0x8010000, &data, 1);
 800859c:	2201      	movs	r2, #1
 800859e:	4906      	ldr	r1, [pc, #24]	@ (80085b8 <HAL_UART_RxCpltCallback+0x40>)
 80085a0:	4807      	ldr	r0, [pc, #28]	@ (80085c0 <HAL_UART_RxCpltCallback+0x48>)
 80085a2:	f7ff ffa5 	bl	80084f0 <Flash_Write_Data>



			// soft reset
			NVIC_SystemReset();
 80085a6:	f7ff ff8d 	bl	80084c4 <__NVIC_SystemReset>
		}
	}
}
 80085aa:	bf00      	nop
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	40004400 	.word	0x40004400
 80085b8:	20000070 	.word	0x20000070
 80085bc:	20000028 	.word	0x20000028
 80085c0:	08010000 	.word	0x08010000

080085c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80085c8:	f000 f9da 	bl	8008980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085cc:	f000 f824 	bl	8008618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085d0:	f000 f8ac 	bl	800872c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80085d4:	f000 f880 	bl	80086d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &data, 1);
 80085d8:	2201      	movs	r2, #1
 80085da:	490c      	ldr	r1, [pc, #48]	@ (800860c <main+0x48>)
 80085dc:	480c      	ldr	r0, [pc, #48]	@ (8008610 <main+0x4c>)
 80085de:	f001 fd37 	bl	800a050 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 80085e2:	2201      	movs	r2, #1
 80085e4:	2140      	movs	r1, #64	@ 0x40
 80085e6:	480b      	ldr	r0, [pc, #44]	@ (8008614 <main+0x50>)
 80085e8:	f001 f870 	bl	80096cc <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 80085ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80085f0:	f000 fa38 	bl	8008a64 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80085f4:	2200      	movs	r2, #0
 80085f6:	2140      	movs	r1, #64	@ 0x40
 80085f8:	4806      	ldr	r0, [pc, #24]	@ (8008614 <main+0x50>)
 80085fa:	f001 f867 	bl	80096cc <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 80085fe:	f241 3088 	movw	r0, #5000	@ 0x1388
 8008602:	f000 fa2f 	bl	8008a64 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8008606:	bf00      	nop
 8008608:	e7eb      	b.n	80085e2 <main+0x1e>
 800860a:	bf00      	nop
 800860c:	20000070 	.word	0x20000070
 8008610:	20000028 	.word	0x20000028
 8008614:	40020000 	.word	0x40020000

08008618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b094      	sub	sp, #80	@ 0x50
 800861c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800861e:	f107 0320 	add.w	r3, r7, #32
 8008622:	2230      	movs	r2, #48	@ 0x30
 8008624:	2100      	movs	r1, #0
 8008626:	4618      	mov	r0, r3
 8008628:	f002 fc36 	bl	800ae98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800862c:	f107 030c 	add.w	r3, r7, #12
 8008630:	2200      	movs	r2, #0
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	605a      	str	r2, [r3, #4]
 8008636:	609a      	str	r2, [r3, #8]
 8008638:	60da      	str	r2, [r3, #12]
 800863a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800863c:	2300      	movs	r3, #0
 800863e:	60bb      	str	r3, [r7, #8]
 8008640:	4b23      	ldr	r3, [pc, #140]	@ (80086d0 <SystemClock_Config+0xb8>)
 8008642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008644:	4a22      	ldr	r2, [pc, #136]	@ (80086d0 <SystemClock_Config+0xb8>)
 8008646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800864a:	6413      	str	r3, [r2, #64]	@ 0x40
 800864c:	4b20      	ldr	r3, [pc, #128]	@ (80086d0 <SystemClock_Config+0xb8>)
 800864e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008654:	60bb      	str	r3, [r7, #8]
 8008656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008658:	2300      	movs	r3, #0
 800865a:	607b      	str	r3, [r7, #4]
 800865c:	4b1d      	ldr	r3, [pc, #116]	@ (80086d4 <SystemClock_Config+0xbc>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008664:	4a1b      	ldr	r2, [pc, #108]	@ (80086d4 <SystemClock_Config+0xbc>)
 8008666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	4b19      	ldr	r3, [pc, #100]	@ (80086d4 <SystemClock_Config+0xbc>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008674:	607b      	str	r3, [r7, #4]
 8008676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008678:	2302      	movs	r3, #2
 800867a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800867c:	2301      	movs	r3, #1
 800867e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008680:	2310      	movs	r3, #16
 8008682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008684:	2300      	movs	r3, #0
 8008686:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008688:	f107 0320 	add.w	r3, r7, #32
 800868c:	4618      	mov	r0, r3
 800868e:	f001 f837 	bl	8009700 <HAL_RCC_OscConfig>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8008698:	f000 f87a 	bl	8008790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800869c:	230f      	movs	r3, #15
 800869e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80086a0:	2300      	movs	r3, #0
 80086a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80086b0:	f107 030c 	add.w	r3, r7, #12
 80086b4:	2100      	movs	r1, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 fa9a 	bl	8009bf0 <HAL_RCC_ClockConfig>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80086c2:	f000 f865 	bl	8008790 <Error_Handler>
  }
}
 80086c6:	bf00      	nop
 80086c8:	3750      	adds	r7, #80	@ 0x50
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	40023800 	.word	0x40023800
 80086d4:	40007000 	.word	0x40007000

080086d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80086dc:	4b11      	ldr	r3, [pc, #68]	@ (8008724 <MX_USART2_UART_Init+0x4c>)
 80086de:	4a12      	ldr	r2, [pc, #72]	@ (8008728 <MX_USART2_UART_Init+0x50>)
 80086e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80086e2:	4b10      	ldr	r3, [pc, #64]	@ (8008724 <MX_USART2_UART_Init+0x4c>)
 80086e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80086e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80086ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008724 <MX_USART2_UART_Init+0x4c>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80086f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008724 <MX_USART2_UART_Init+0x4c>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80086f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008724 <MX_USART2_UART_Init+0x4c>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80086fc:	4b09      	ldr	r3, [pc, #36]	@ (8008724 <MX_USART2_UART_Init+0x4c>)
 80086fe:	220c      	movs	r2, #12
 8008700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008702:	4b08      	ldr	r3, [pc, #32]	@ (8008724 <MX_USART2_UART_Init+0x4c>)
 8008704:	2200      	movs	r2, #0
 8008706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008708:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <MX_USART2_UART_Init+0x4c>)
 800870a:	2200      	movs	r2, #0
 800870c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800870e:	4805      	ldr	r0, [pc, #20]	@ (8008724 <MX_USART2_UART_Init+0x4c>)
 8008710:	f001 fc4e 	bl	8009fb0 <HAL_UART_Init>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800871a:	f000 f839 	bl	8008790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800871e:	bf00      	nop
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000028 	.word	0x20000028
 8008728:	40004400 	.word	0x40004400

0800872c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	609a      	str	r2, [r3, #8]
 800873c:	60da      	str	r2, [r3, #12]
 800873e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008740:	2300      	movs	r3, #0
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	4b10      	ldr	r3, [pc, #64]	@ (8008788 <MX_GPIO_Init+0x5c>)
 8008746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008748:	4a0f      	ldr	r2, [pc, #60]	@ (8008788 <MX_GPIO_Init+0x5c>)
 800874a:	f043 0301 	orr.w	r3, r3, #1
 800874e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008750:	4b0d      	ldr	r3, [pc, #52]	@ (8008788 <MX_GPIO_Init+0x5c>)
 8008752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800875c:	2200      	movs	r2, #0
 800875e:	2140      	movs	r1, #64	@ 0x40
 8008760:	480a      	ldr	r0, [pc, #40]	@ (800878c <MX_GPIO_Init+0x60>)
 8008762:	f000 ffb3 	bl	80096cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008766:	2340      	movs	r3, #64	@ 0x40
 8008768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800876a:	2301      	movs	r3, #1
 800876c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008772:	2300      	movs	r3, #0
 8008774:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008776:	1d3b      	adds	r3, r7, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4804      	ldr	r0, [pc, #16]	@ (800878c <MX_GPIO_Init+0x60>)
 800877c:	f000 fe22 	bl	80093c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008780:	bf00      	nop
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40023800 	.word	0x40023800
 800878c:	40020000 	.word	0x40020000

08008790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008794:	b672      	cpsid	i
}
 8008796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008798:	bf00      	nop
 800879a:	e7fd      	b.n	8008798 <Error_Handler+0x8>

0800879c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087a2:	2300      	movs	r3, #0
 80087a4:	607b      	str	r3, [r7, #4]
 80087a6:	4b10      	ldr	r3, [pc, #64]	@ (80087e8 <HAL_MspInit+0x4c>)
 80087a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087aa:	4a0f      	ldr	r2, [pc, #60]	@ (80087e8 <HAL_MspInit+0x4c>)
 80087ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <HAL_MspInit+0x4c>)
 80087b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087ba:	607b      	str	r3, [r7, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087be:	2300      	movs	r3, #0
 80087c0:	603b      	str	r3, [r7, #0]
 80087c2:	4b09      	ldr	r3, [pc, #36]	@ (80087e8 <HAL_MspInit+0x4c>)
 80087c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c6:	4a08      	ldr	r2, [pc, #32]	@ (80087e8 <HAL_MspInit+0x4c>)
 80087c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80087ce:	4b06      	ldr	r3, [pc, #24]	@ (80087e8 <HAL_MspInit+0x4c>)
 80087d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087da:	bf00      	nop
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	40023800 	.word	0x40023800

080087ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	@ 0x28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	605a      	str	r2, [r3, #4]
 80087fe:	609a      	str	r2, [r3, #8]
 8008800:	60da      	str	r2, [r3, #12]
 8008802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a1d      	ldr	r2, [pc, #116]	@ (8008880 <HAL_UART_MspInit+0x94>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d133      	bne.n	8008876 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800880e:	2300      	movs	r3, #0
 8008810:	613b      	str	r3, [r7, #16]
 8008812:	4b1c      	ldr	r3, [pc, #112]	@ (8008884 <HAL_UART_MspInit+0x98>)
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	4a1b      	ldr	r2, [pc, #108]	@ (8008884 <HAL_UART_MspInit+0x98>)
 8008818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800881c:	6413      	str	r3, [r2, #64]	@ 0x40
 800881e:	4b19      	ldr	r3, [pc, #100]	@ (8008884 <HAL_UART_MspInit+0x98>)
 8008820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008826:	613b      	str	r3, [r7, #16]
 8008828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	4b15      	ldr	r3, [pc, #84]	@ (8008884 <HAL_UART_MspInit+0x98>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008832:	4a14      	ldr	r2, [pc, #80]	@ (8008884 <HAL_UART_MspInit+0x98>)
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	6313      	str	r3, [r2, #48]	@ 0x30
 800883a:	4b12      	ldr	r3, [pc, #72]	@ (8008884 <HAL_UART_MspInit+0x98>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008846:	230c      	movs	r3, #12
 8008848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800884a:	2302      	movs	r3, #2
 800884c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800884e:	2300      	movs	r3, #0
 8008850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008852:	2303      	movs	r3, #3
 8008854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008856:	2307      	movs	r3, #7
 8008858:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800885a:	f107 0314 	add.w	r3, r7, #20
 800885e:	4619      	mov	r1, r3
 8008860:	4809      	ldr	r0, [pc, #36]	@ (8008888 <HAL_UART_MspInit+0x9c>)
 8008862:	f000 fdaf 	bl	80093c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008866:	2200      	movs	r2, #0
 8008868:	2100      	movs	r1, #0
 800886a:	2026      	movs	r0, #38	@ 0x26
 800886c:	f000 f9f9 	bl	8008c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008870:	2026      	movs	r0, #38	@ 0x26
 8008872:	f000 fa12 	bl	8008c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008876:	bf00      	nop
 8008878:	3728      	adds	r7, #40	@ 0x28
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40004400 	.word	0x40004400
 8008884:	40023800 	.word	0x40023800
 8008888:	40020000 	.word	0x40020000

0800888c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <NMI_Handler+0x4>

08008894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008894:	b480      	push	{r7}
 8008896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008898:	bf00      	nop
 800889a:	e7fd      	b.n	8008898 <HardFault_Handler+0x4>

0800889c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <MemManage_Handler+0x4>

080088a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <BusFault_Handler+0x4>

080088ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <UsageFault_Handler+0x4>

080088b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088b8:	bf00      	nop
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088c2:	b480      	push	{r7}
 80088c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088c6:	bf00      	nop
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088d0:	b480      	push	{r7}
 80088d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088d4:	bf00      	nop
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088e2:	f000 f89f 	bl	8008a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088e6:	bf00      	nop
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80088f0:	4802      	ldr	r0, [pc, #8]	@ (80088fc <USART2_IRQHandler+0x10>)
 80088f2:	f001 fbd3 	bl	800a09c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80088f6:	bf00      	nop
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	20000028 	.word	0x20000028

08008900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008904:	4b07      	ldr	r3, [pc, #28]	@ (8008924 <SystemInit+0x24>)
 8008906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890a:	4a06      	ldr	r2, [pc, #24]	@ (8008924 <SystemInit+0x24>)
 800890c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008914:	4b03      	ldr	r3, [pc, #12]	@ (8008924 <SystemInit+0x24>)
 8008916:	4a04      	ldr	r2, [pc, #16]	@ (8008928 <SystemInit+0x28>)
 8008918:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800891a:	bf00      	nop
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	e000ed00 	.word	0xe000ed00
 8008928:	08008000 	.word	0x08008000

0800892c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800892c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008930:	f7ff ffe6 	bl	8008900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008934:	480c      	ldr	r0, [pc, #48]	@ (8008968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008936:	490d      	ldr	r1, [pc, #52]	@ (800896c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008938:	4a0d      	ldr	r2, [pc, #52]	@ (8008970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800893a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800893c:	e002      	b.n	8008944 <LoopCopyDataInit>

0800893e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800893e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008942:	3304      	adds	r3, #4

08008944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008948:	d3f9      	bcc.n	800893e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800894a:	4a0a      	ldr	r2, [pc, #40]	@ (8008974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800894c:	4c0a      	ldr	r4, [pc, #40]	@ (8008978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800894e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008950:	e001      	b.n	8008956 <LoopFillZerobss>

08008952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008954:	3204      	adds	r2, #4

08008956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008958:	d3fb      	bcc.n	8008952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800895a:	f002 faa5 	bl	800aea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800895e:	f7ff fe31 	bl	80085c4 <main>
  bx  lr    
 8008962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008964:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800896c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008970:	0800af30 	.word	0x0800af30
  ldr r2, =_sbss
 8008974:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008978:	200000ac 	.word	0x200000ac

0800897c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800897c:	e7fe      	b.n	800897c <ADC_IRQHandler>
	...

08008980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008984:	4b0e      	ldr	r3, [pc, #56]	@ (80089c0 <HAL_Init+0x40>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a0d      	ldr	r2, [pc, #52]	@ (80089c0 <HAL_Init+0x40>)
 800898a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800898e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008990:	4b0b      	ldr	r3, [pc, #44]	@ (80089c0 <HAL_Init+0x40>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a0a      	ldr	r2, [pc, #40]	@ (80089c0 <HAL_Init+0x40>)
 8008996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800899a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800899c:	4b08      	ldr	r3, [pc, #32]	@ (80089c0 <HAL_Init+0x40>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a07      	ldr	r2, [pc, #28]	@ (80089c0 <HAL_Init+0x40>)
 80089a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089a8:	2003      	movs	r0, #3
 80089aa:	f000 f94f 	bl	8008c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80089ae:	200f      	movs	r0, #15
 80089b0:	f000 f808 	bl	80089c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089b4:	f7ff fef2 	bl	800879c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40023c00 	.word	0x40023c00

080089c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80089cc:	4b12      	ldr	r3, [pc, #72]	@ (8008a18 <HAL_InitTick+0x54>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4b12      	ldr	r3, [pc, #72]	@ (8008a1c <HAL_InitTick+0x58>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	4619      	mov	r1, r3
 80089d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80089da:	fbb3 f3f1 	udiv	r3, r3, r1
 80089de:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f967 	bl	8008cb6 <HAL_SYSTICK_Config>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e00e      	b.n	8008a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b0f      	cmp	r3, #15
 80089f6:	d80a      	bhi.n	8008a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089f8:	2200      	movs	r2, #0
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008a00:	f000 f92f 	bl	8008c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a04:	4a06      	ldr	r2, [pc, #24]	@ (8008a20 <HAL_InitTick+0x5c>)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e000      	b.n	8008a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20000000 	.word	0x20000000
 8008a1c:	20000008 	.word	0x20000008
 8008a20:	20000004 	.word	0x20000004

08008a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a24:	b480      	push	{r7}
 8008a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a28:	4b06      	ldr	r3, [pc, #24]	@ (8008a44 <HAL_IncTick+0x20>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <HAL_IncTick+0x24>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4413      	add	r3, r2
 8008a34:	4a04      	ldr	r2, [pc, #16]	@ (8008a48 <HAL_IncTick+0x24>)
 8008a36:	6013      	str	r3, [r2, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20000008 	.word	0x20000008
 8008a48:	20000088 	.word	0x20000088

08008a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8008a50:	4b03      	ldr	r3, [pc, #12]	@ (8008a60 <HAL_GetTick+0x14>)
 8008a52:	681b      	ldr	r3, [r3, #0]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	20000088 	.word	0x20000088

08008a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a6c:	f7ff ffee 	bl	8008a4c <HAL_GetTick>
 8008a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7c:	d005      	beq.n	8008a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa8 <HAL_Delay+0x44>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008a8a:	bf00      	nop
 8008a8c:	f7ff ffde 	bl	8008a4c <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d8f7      	bhi.n	8008a8c <HAL_Delay+0x28>
  {
  }
}
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20000008 	.word	0x20000008

08008aac <__NVIC_SetPriorityGrouping>:
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008abc:	4b0c      	ldr	r3, [pc, #48]	@ (8008af0 <__NVIC_SetPriorityGrouping+0x44>)
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ade:	4a04      	ldr	r2, [pc, #16]	@ (8008af0 <__NVIC_SetPriorityGrouping+0x44>)
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	60d3      	str	r3, [r2, #12]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	e000ed00 	.word	0xe000ed00

08008af4 <__NVIC_GetPriorityGrouping>:
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008af8:	4b04      	ldr	r3, [pc, #16]	@ (8008b0c <__NVIC_GetPriorityGrouping+0x18>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	0a1b      	lsrs	r3, r3, #8
 8008afe:	f003 0307 	and.w	r3, r3, #7
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	e000ed00 	.word	0xe000ed00

08008b10 <__NVIC_EnableIRQ>:
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	db0b      	blt.n	8008b3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	f003 021f 	and.w	r2, r3, #31
 8008b28:	4907      	ldr	r1, [pc, #28]	@ (8008b48 <__NVIC_EnableIRQ+0x38>)
 8008b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b2e:	095b      	lsrs	r3, r3, #5
 8008b30:	2001      	movs	r0, #1
 8008b32:	fa00 f202 	lsl.w	r2, r0, r2
 8008b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	e000e100 	.word	0xe000e100

08008b4c <__NVIC_SetPriority>:
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	4603      	mov	r3, r0
 8008b54:	6039      	str	r1, [r7, #0]
 8008b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	db0a      	blt.n	8008b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	490c      	ldr	r1, [pc, #48]	@ (8008b98 <__NVIC_SetPriority+0x4c>)
 8008b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b6a:	0112      	lsls	r2, r2, #4
 8008b6c:	b2d2      	uxtb	r2, r2
 8008b6e:	440b      	add	r3, r1
 8008b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b74:	e00a      	b.n	8008b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	4908      	ldr	r1, [pc, #32]	@ (8008b9c <__NVIC_SetPriority+0x50>)
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	f003 030f 	and.w	r3, r3, #15
 8008b82:	3b04      	subs	r3, #4
 8008b84:	0112      	lsls	r2, r2, #4
 8008b86:	b2d2      	uxtb	r2, r2
 8008b88:	440b      	add	r3, r1
 8008b8a:	761a      	strb	r2, [r3, #24]
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	e000e100 	.word	0xe000e100
 8008b9c:	e000ed00 	.word	0xe000ed00

08008ba0 <NVIC_EncodePriority>:
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b089      	sub	sp, #36	@ 0x24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f003 0307 	and.w	r3, r3, #7
 8008bb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f1c3 0307 	rsb	r3, r3, #7
 8008bba:	2b04      	cmp	r3, #4
 8008bbc:	bf28      	it	cs
 8008bbe:	2304      	movcs	r3, #4
 8008bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	2b06      	cmp	r3, #6
 8008bc8:	d902      	bls.n	8008bd0 <NVIC_EncodePriority+0x30>
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	3b03      	subs	r3, #3
 8008bce:	e000      	b.n	8008bd2 <NVIC_EncodePriority+0x32>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	fa02 f303 	lsl.w	r3, r2, r3
 8008bde:	43da      	mvns	r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	401a      	ands	r2, r3
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008be8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf2:	43d9      	mvns	r1, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bf8:	4313      	orrs	r3, r2
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3724      	adds	r7, #36	@ 0x24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c18:	d301      	bcc.n	8008c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e00f      	b.n	8008c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8008c48 <SysTick_Config+0x40>)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c26:	210f      	movs	r1, #15
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	f7ff ff8e 	bl	8008b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c30:	4b05      	ldr	r3, [pc, #20]	@ (8008c48 <SysTick_Config+0x40>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c36:	4b04      	ldr	r3, [pc, #16]	@ (8008c48 <SysTick_Config+0x40>)
 8008c38:	2207      	movs	r2, #7
 8008c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	e000e010 	.word	0xe000e010

08008c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff ff29 	bl	8008aac <__NVIC_SetPriorityGrouping>
}
 8008c5a:	bf00      	nop
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	4603      	mov	r3, r0
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c74:	f7ff ff3e 	bl	8008af4 <__NVIC_GetPriorityGrouping>
 8008c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f7ff ff8e 	bl	8008ba0 <NVIC_EncodePriority>
 8008c84:	4602      	mov	r2, r0
 8008c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff ff5d 	bl	8008b4c <__NVIC_SetPriority>
}
 8008c92:	bf00      	nop
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff ff31 	bl	8008b10 <__NVIC_EnableIRQ>
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7ff ffa2 	bl	8008c08 <SysTick_Config>
 8008cc4:	4603      	mov	r3, r0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008cdc:	f7ff feb6 	bl	8008a4c <HAL_GetTick>
 8008ce0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d008      	beq.n	8008d00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2280      	movs	r2, #128	@ 0x80
 8008cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e052      	b.n	8008da6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0216 	bic.w	r2, r2, #22
 8008d0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d103      	bne.n	8008d30 <HAL_DMA_Abort+0x62>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d007      	beq.n	8008d40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0208 	bic.w	r2, r2, #8
 8008d3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0201 	bic.w	r2, r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d50:	e013      	b.n	8008d7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d52:	f7ff fe7b 	bl	8008a4c <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	2b05      	cmp	r3, #5
 8008d5e:	d90c      	bls.n	8008d7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2203      	movs	r2, #3
 8008d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e015      	b.n	8008da6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e4      	bne.n	8008d52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d8c:	223f      	movs	r2, #63	@ 0x3f
 8008d8e:	409a      	lsls	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d004      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2280      	movs	r2, #128	@ 0x80
 8008dc6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e00c      	b.n	8008de6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2205      	movs	r2, #5
 8008dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0201 	bic.w	r2, r2, #1
 8008de2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
	...

08008df4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008e06:	4b23      	ldr	r3, [pc, #140]	@ (8008e94 <HAL_FLASH_Program+0xa0>)
 8008e08:	7e1b      	ldrb	r3, [r3, #24]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_FLASH_Program+0x1e>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e03b      	b.n	8008e8a <HAL_FLASH_Program+0x96>
 8008e12:	4b20      	ldr	r3, [pc, #128]	@ (8008e94 <HAL_FLASH_Program+0xa0>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008e18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008e1c:	f000 f870 	bl	8008f00 <FLASH_WaitForLastOperation>
 8008e20:	4603      	mov	r3, r0
 8008e22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8008e24:	7dfb      	ldrb	r3, [r7, #23]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d12b      	bne.n	8008e82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d105      	bne.n	8008e3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008e30:	783b      	ldrb	r3, [r7, #0]
 8008e32:	4619      	mov	r1, r3
 8008e34:	68b8      	ldr	r0, [r7, #8]
 8008e36:	f000 f91b 	bl	8009070 <FLASH_Program_Byte>
 8008e3a:	e016      	b.n	8008e6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d105      	bne.n	8008e4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8008e42:	883b      	ldrh	r3, [r7, #0]
 8008e44:	4619      	mov	r1, r3
 8008e46:	68b8      	ldr	r0, [r7, #8]
 8008e48:	f000 f8ee 	bl	8009028 <FLASH_Program_HalfWord>
 8008e4c:	e00d      	b.n	8008e6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d105      	bne.n	8008e60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	4619      	mov	r1, r3
 8008e58:	68b8      	ldr	r0, [r7, #8]
 8008e5a:	f000 f8c3 	bl	8008fe4 <FLASH_Program_Word>
 8008e5e:	e004      	b.n	8008e6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8008e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e64:	68b8      	ldr	r0, [r7, #8]
 8008e66:	f000 f88b 	bl	8008f80 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008e6a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008e6e:	f000 f847 	bl	8008f00 <FLASH_WaitForLastOperation>
 8008e72:	4603      	mov	r3, r0
 8008e74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8008e76:	4b08      	ldr	r3, [pc, #32]	@ (8008e98 <HAL_FLASH_Program+0xa4>)
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	4a07      	ldr	r2, [pc, #28]	@ (8008e98 <HAL_FLASH_Program+0xa4>)
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008e82:	4b04      	ldr	r3, [pc, #16]	@ (8008e94 <HAL_FLASH_Program+0xa0>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	761a      	strb	r2, [r3, #24]
  
  return status;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	2000008c 	.word	0x2000008c
 8008e98:	40023c00 	.word	0x40023c00

08008e9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed4 <HAL_FLASH_Unlock+0x38>)
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	da0b      	bge.n	8008ec6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008eae:	4b09      	ldr	r3, [pc, #36]	@ (8008ed4 <HAL_FLASH_Unlock+0x38>)
 8008eb0:	4a09      	ldr	r2, [pc, #36]	@ (8008ed8 <HAL_FLASH_Unlock+0x3c>)
 8008eb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008eb4:	4b07      	ldr	r3, [pc, #28]	@ (8008ed4 <HAL_FLASH_Unlock+0x38>)
 8008eb6:	4a09      	ldr	r2, [pc, #36]	@ (8008edc <HAL_FLASH_Unlock+0x40>)
 8008eb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008eba:	4b06      	ldr	r3, [pc, #24]	@ (8008ed4 <HAL_FLASH_Unlock+0x38>)
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	da01      	bge.n	8008ec6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	40023c00 	.word	0x40023c00
 8008ed8:	45670123 	.word	0x45670123
 8008edc:	cdef89ab 	.word	0xcdef89ab

08008ee0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008ee4:	4b05      	ldr	r3, [pc, #20]	@ (8008efc <HAL_FLASH_Lock+0x1c>)
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	4a04      	ldr	r2, [pc, #16]	@ (8008efc <HAL_FLASH_Lock+0x1c>)
 8008eea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008eee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	40023c00 	.word	0x40023c00

08008f00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008f78 <FLASH_WaitForLastOperation+0x78>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8008f12:	f7ff fd9b 	bl	8008a4c <HAL_GetTick>
 8008f16:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008f18:	e010      	b.n	8008f3c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f20:	d00c      	beq.n	8008f3c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d007      	beq.n	8008f38 <FLASH_WaitForLastOperation+0x38>
 8008f28:	f7ff fd90 	bl	8008a4c <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d201      	bcs.n	8008f3c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e019      	b.n	8008f70 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f7c <FLASH_WaitForLastOperation+0x7c>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1e8      	bne.n	8008f1a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008f48:	4b0c      	ldr	r3, [pc, #48]	@ (8008f7c <FLASH_WaitForLastOperation+0x7c>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008f54:	4b09      	ldr	r3, [pc, #36]	@ (8008f7c <FLASH_WaitForLastOperation+0x7c>)
 8008f56:	2201      	movs	r2, #1
 8008f58:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008f5a:	4b08      	ldr	r3, [pc, #32]	@ (8008f7c <FLASH_WaitForLastOperation+0x7c>)
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008f66:	f000 f8a5 	bl	80090b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e000      	b.n	8008f70 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
  
}  
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	2000008c 	.word	0x2000008c
 8008f7c:	40023c00 	.word	0x40023c00

08008f80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008f8c:	4b14      	ldr	r3, [pc, #80]	@ (8008fe0 <FLASH_Program_DoubleWord+0x60>)
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	4a13      	ldr	r2, [pc, #76]	@ (8008fe0 <FLASH_Program_DoubleWord+0x60>)
 8008f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008f98:	4b11      	ldr	r3, [pc, #68]	@ (8008fe0 <FLASH_Program_DoubleWord+0x60>)
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	4a10      	ldr	r2, [pc, #64]	@ (8008fe0 <FLASH_Program_DoubleWord+0x60>)
 8008f9e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008fa2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe0 <FLASH_Program_DoubleWord+0x60>)
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8008fe0 <FLASH_Program_DoubleWord+0x60>)
 8008faa:	f043 0301 	orr.w	r3, r3, #1
 8008fae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008fb6:	f3bf 8f6f 	isb	sy
}
 8008fba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fc0:	f04f 0200 	mov.w	r2, #0
 8008fc4:	f04f 0300 	mov.w	r3, #0
 8008fc8:	000a      	movs	r2, r1
 8008fca:	2300      	movs	r3, #0
 8008fcc:	68f9      	ldr	r1, [r7, #12]
 8008fce:	3104      	adds	r1, #4
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	600b      	str	r3, [r1, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	40023c00 	.word	0x40023c00

08008fe4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008fee:	4b0d      	ldr	r3, [pc, #52]	@ (8009024 <FLASH_Program_Word+0x40>)
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8009024 <FLASH_Program_Word+0x40>)
 8008ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ff8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8008ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8009024 <FLASH_Program_Word+0x40>)
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	4a09      	ldr	r2, [pc, #36]	@ (8009024 <FLASH_Program_Word+0x40>)
 8009000:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009004:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009006:	4b07      	ldr	r3, [pc, #28]	@ (8009024 <FLASH_Program_Word+0x40>)
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	4a06      	ldr	r2, [pc, #24]	@ (8009024 <FLASH_Program_Word+0x40>)
 800900c:	f043 0301 	orr.w	r3, r3, #1
 8009010:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	601a      	str	r2, [r3, #0]
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	40023c00 	.word	0x40023c00

08009028 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009034:	4b0d      	ldr	r3, [pc, #52]	@ (800906c <FLASH_Program_HalfWord+0x44>)
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	4a0c      	ldr	r2, [pc, #48]	@ (800906c <FLASH_Program_HalfWord+0x44>)
 800903a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800903e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009040:	4b0a      	ldr	r3, [pc, #40]	@ (800906c <FLASH_Program_HalfWord+0x44>)
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	4a09      	ldr	r2, [pc, #36]	@ (800906c <FLASH_Program_HalfWord+0x44>)
 8009046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800904a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800904c:	4b07      	ldr	r3, [pc, #28]	@ (800906c <FLASH_Program_HalfWord+0x44>)
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	4a06      	ldr	r2, [pc, #24]	@ (800906c <FLASH_Program_HalfWord+0x44>)
 8009052:	f043 0301 	orr.w	r3, r3, #1
 8009056:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	887a      	ldrh	r2, [r7, #2]
 800905c:	801a      	strh	r2, [r3, #0]
}
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	40023c00 	.word	0x40023c00

08009070 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800907c:	4b0c      	ldr	r3, [pc, #48]	@ (80090b0 <FLASH_Program_Byte+0x40>)
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	4a0b      	ldr	r2, [pc, #44]	@ (80090b0 <FLASH_Program_Byte+0x40>)
 8009082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009086:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009088:	4b09      	ldr	r3, [pc, #36]	@ (80090b0 <FLASH_Program_Byte+0x40>)
 800908a:	4a09      	ldr	r2, [pc, #36]	@ (80090b0 <FLASH_Program_Byte+0x40>)
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009090:	4b07      	ldr	r3, [pc, #28]	@ (80090b0 <FLASH_Program_Byte+0x40>)
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	4a06      	ldr	r2, [pc, #24]	@ (80090b0 <FLASH_Program_Byte+0x40>)
 8009096:	f043 0301 	orr.w	r3, r3, #1
 800909a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	78fa      	ldrb	r2, [r7, #3]
 80090a0:	701a      	strb	r2, [r3, #0]
}
 80090a2:	bf00      	nop
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40023c00 	.word	0x40023c00

080090b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80090b4:	b480      	push	{r7}
 80090b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80090b8:	4b2f      	ldr	r3, [pc, #188]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f003 0310 	and.w	r3, r3, #16
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d008      	beq.n	80090d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80090c4:	4b2d      	ldr	r3, [pc, #180]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	f043 0310 	orr.w	r3, r3, #16
 80090cc:	4a2b      	ldr	r2, [pc, #172]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 80090ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80090d0:	4b29      	ldr	r3, [pc, #164]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 80090d2:	2210      	movs	r2, #16
 80090d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80090d6:	4b28      	ldr	r3, [pc, #160]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f003 0320 	and.w	r3, r3, #32
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d008      	beq.n	80090f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80090e2:	4b26      	ldr	r3, [pc, #152]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f043 0308 	orr.w	r3, r3, #8
 80090ea:	4a24      	ldr	r2, [pc, #144]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 80090ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80090ee:	4b22      	ldr	r3, [pc, #136]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 80090f0:	2220      	movs	r2, #32
 80090f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80090f4:	4b20      	ldr	r3, [pc, #128]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d008      	beq.n	8009112 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009100:	4b1e      	ldr	r3, [pc, #120]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	f043 0304 	orr.w	r3, r3, #4
 8009108:	4a1c      	ldr	r2, [pc, #112]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 800910a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800910c:	4b1a      	ldr	r3, [pc, #104]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 800910e:	2240      	movs	r2, #64	@ 0x40
 8009110:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009112:	4b19      	ldr	r3, [pc, #100]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800911a:	2b00      	cmp	r3, #0
 800911c:	d008      	beq.n	8009130 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800911e:	4b17      	ldr	r3, [pc, #92]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	f043 0302 	orr.w	r3, r3, #2
 8009126:	4a15      	ldr	r2, [pc, #84]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 8009128:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800912a:	4b13      	ldr	r3, [pc, #76]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 800912c:	2280      	movs	r2, #128	@ 0x80
 800912e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8009130:	4b11      	ldr	r3, [pc, #68]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009138:	2b00      	cmp	r3, #0
 800913a:	d009      	beq.n	8009150 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800913c:	4b0f      	ldr	r3, [pc, #60]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	f043 0301 	orr.w	r3, r3, #1
 8009144:	4a0d      	ldr	r2, [pc, #52]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 8009146:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8009148:	4b0b      	ldr	r3, [pc, #44]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 800914a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800914e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009150:	4b09      	ldr	r3, [pc, #36]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d008      	beq.n	800916e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800915c:	4b07      	ldr	r3, [pc, #28]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f043 0320 	orr.w	r3, r3, #32
 8009164:	4a05      	ldr	r2, [pc, #20]	@ (800917c <FLASH_SetErrorCode+0xc8>)
 8009166:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009168:	4b03      	ldr	r3, [pc, #12]	@ (8009178 <FLASH_SetErrorCode+0xc4>)
 800916a:	2202      	movs	r2, #2
 800916c:	60da      	str	r2, [r3, #12]
  }
}
 800916e:	bf00      	nop
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	40023c00 	.word	0x40023c00
 800917c:	2000008c 	.word	0x2000008c

08009180 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009192:	4b31      	ldr	r3, [pc, #196]	@ (8009258 <HAL_FLASHEx_Erase+0xd8>)
 8009194:	7e1b      	ldrb	r3, [r3, #24]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d101      	bne.n	800919e <HAL_FLASHEx_Erase+0x1e>
 800919a:	2302      	movs	r3, #2
 800919c:	e058      	b.n	8009250 <HAL_FLASHEx_Erase+0xd0>
 800919e:	4b2e      	ldr	r3, [pc, #184]	@ (8009258 <HAL_FLASHEx_Erase+0xd8>)
 80091a0:	2201      	movs	r2, #1
 80091a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80091a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80091a8:	f7ff feaa 	bl	8008f00 <FLASH_WaitForLastOperation>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d148      	bne.n	8009248 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	f04f 32ff 	mov.w	r2, #4294967295
 80091bc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d115      	bne.n	80091f2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f000 f844 	bl	8009260 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80091d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80091dc:	f7ff fe90 	bl	8008f00 <FLASH_WaitForLastOperation>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80091e4:	4b1d      	ldr	r3, [pc, #116]	@ (800925c <HAL_FLASHEx_Erase+0xdc>)
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	4a1c      	ldr	r2, [pc, #112]	@ (800925c <HAL_FLASHEx_Erase+0xdc>)
 80091ea:	f023 0304 	bic.w	r3, r3, #4
 80091ee:	6113      	str	r3, [r2, #16]
 80091f0:	e028      	b.n	8009244 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	60bb      	str	r3, [r7, #8]
 80091f8:	e01c      	b.n	8009234 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	4619      	mov	r1, r3
 8009202:	68b8      	ldr	r0, [r7, #8]
 8009204:	f000 f850 	bl	80092a8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009208:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800920c:	f7ff fe78 	bl	8008f00 <FLASH_WaitForLastOperation>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009214:	4b11      	ldr	r3, [pc, #68]	@ (800925c <HAL_FLASHEx_Erase+0xdc>)
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	4a10      	ldr	r2, [pc, #64]	@ (800925c <HAL_FLASHEx_Erase+0xdc>)
 800921a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800921e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	601a      	str	r2, [r3, #0]
          break;
 800922c:	e00a      	b.n	8009244 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	3301      	adds	r3, #1
 8009232:	60bb      	str	r3, [r7, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	4413      	add	r3, r2
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	429a      	cmp	r2, r3
 8009242:	d3da      	bcc.n	80091fa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009244:	f000 f878 	bl	8009338 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009248:	4b03      	ldr	r3, [pc, #12]	@ (8009258 <HAL_FLASHEx_Erase+0xd8>)
 800924a:	2200      	movs	r2, #0
 800924c:	761a      	strb	r2, [r3, #24]

  return status;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	2000008c 	.word	0x2000008c
 800925c:	40023c00 	.word	0x40023c00

08009260 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800926c:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <FLASH_MassErase+0x44>)
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	4a0c      	ldr	r2, [pc, #48]	@ (80092a4 <FLASH_MassErase+0x44>)
 8009272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009278:	4b0a      	ldr	r3, [pc, #40]	@ (80092a4 <FLASH_MassErase+0x44>)
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	4a09      	ldr	r2, [pc, #36]	@ (80092a4 <FLASH_MassErase+0x44>)
 800927e:	f043 0304 	orr.w	r3, r3, #4
 8009282:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8009284:	4b07      	ldr	r3, [pc, #28]	@ (80092a4 <FLASH_MassErase+0x44>)
 8009286:	691a      	ldr	r2, [r3, #16]
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	021b      	lsls	r3, r3, #8
 800928c:	4313      	orrs	r3, r2
 800928e:	4a05      	ldr	r2, [pc, #20]	@ (80092a4 <FLASH_MassErase+0x44>)
 8009290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009294:	6113      	str	r3, [r2, #16]
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40023c00 	.word	0x40023c00

080092a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d102      	bne.n	80092c4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	e010      	b.n	80092e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80092c4:	78fb      	ldrb	r3, [r7, #3]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d103      	bne.n	80092d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80092ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	e009      	b.n	80092e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d103      	bne.n	80092e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80092d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	e002      	b.n	80092e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80092e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80092e4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092e6:	4b13      	ldr	r3, [pc, #76]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	4a12      	ldr	r2, [pc, #72]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 80092ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80092f2:	4b10      	ldr	r3, [pc, #64]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 80092f4:	691a      	ldr	r2, [r3, #16]
 80092f6:	490f      	ldr	r1, [pc, #60]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80092fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	4a0c      	ldr	r2, [pc, #48]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 8009304:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009308:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800930a:	4b0a      	ldr	r3, [pc, #40]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 800930c:	691a      	ldr	r2, [r3, #16]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	4313      	orrs	r3, r2
 8009314:	4a07      	ldr	r2, [pc, #28]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 8009316:	f043 0302 	orr.w	r3, r3, #2
 800931a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800931c:	4b05      	ldr	r3, [pc, #20]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	4a04      	ldr	r2, [pc, #16]	@ (8009334 <FLASH_Erase_Sector+0x8c>)
 8009322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009326:	6113      	str	r3, [r2, #16]
}
 8009328:	bf00      	nop
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	40023c00 	.word	0x40023c00

08009338 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800933c:	4b20      	ldr	r3, [pc, #128]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009344:	2b00      	cmp	r3, #0
 8009346:	d017      	beq.n	8009378 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009348:	4b1d      	ldr	r3, [pc, #116]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a1c      	ldr	r2, [pc, #112]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 800934e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009352:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009354:	4b1a      	ldr	r3, [pc, #104]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a19      	ldr	r2, [pc, #100]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 800935a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	4b17      	ldr	r3, [pc, #92]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a16      	ldr	r2, [pc, #88]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 8009366:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800936a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800936c:	4b14      	ldr	r3, [pc, #80]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a13      	ldr	r2, [pc, #76]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 8009372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009376:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009378:	4b11      	ldr	r3, [pc, #68]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009380:	2b00      	cmp	r3, #0
 8009382:	d017      	beq.n	80093b4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009384:	4b0e      	ldr	r3, [pc, #56]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a0d      	ldr	r2, [pc, #52]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 800938a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800938e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009390:	4b0b      	ldr	r3, [pc, #44]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a0a      	ldr	r2, [pc, #40]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 8009396:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	4b08      	ldr	r3, [pc, #32]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a07      	ldr	r2, [pc, #28]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 80093a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80093a8:	4b05      	ldr	r3, [pc, #20]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a04      	ldr	r2, [pc, #16]	@ (80093c0 <FLASH_FlushCaches+0x88>)
 80093ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80093b2:	6013      	str	r3, [r2, #0]
  }
}
 80093b4:	bf00      	nop
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	40023c00 	.word	0x40023c00

080093c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b089      	sub	sp, #36	@ 0x24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80093da:	2300      	movs	r3, #0
 80093dc:	61fb      	str	r3, [r7, #28]
 80093de:	e159      	b.n	8009694 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80093e0:	2201      	movs	r2, #1
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	fa02 f303 	lsl.w	r3, r2, r3
 80093e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	4013      	ands	r3, r2
 80093f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	f040 8148 	bne.w	800968e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	2b01      	cmp	r3, #1
 8009408:	d005      	beq.n	8009416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009412:	2b02      	cmp	r3, #2
 8009414:	d130      	bne.n	8009478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	2203      	movs	r2, #3
 8009422:	fa02 f303 	lsl.w	r3, r2, r3
 8009426:	43db      	mvns	r3, r3
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	4013      	ands	r3, r2
 800942c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	fa02 f303 	lsl.w	r3, r2, r3
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	4313      	orrs	r3, r2
 800943e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800944c:	2201      	movs	r2, #1
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	fa02 f303 	lsl.w	r3, r2, r3
 8009454:	43db      	mvns	r3, r3
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	4013      	ands	r3, r2
 800945a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	091b      	lsrs	r3, r3, #4
 8009462:	f003 0201 	and.w	r2, r3, #1
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	fa02 f303 	lsl.w	r3, r2, r3
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	4313      	orrs	r3, r2
 8009470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f003 0303 	and.w	r3, r3, #3
 8009480:	2b03      	cmp	r3, #3
 8009482:	d017      	beq.n	80094b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	2203      	movs	r2, #3
 8009490:	fa02 f303 	lsl.w	r3, r2, r3
 8009494:	43db      	mvns	r3, r3
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	4013      	ands	r3, r2
 800949a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	fa02 f303 	lsl.w	r3, r2, r3
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f003 0303 	and.w	r3, r3, #3
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d123      	bne.n	8009508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	08da      	lsrs	r2, r3, #3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3208      	adds	r2, #8
 80094c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	f003 0307 	and.w	r3, r3, #7
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	220f      	movs	r2, #15
 80094d8:	fa02 f303 	lsl.w	r3, r2, r3
 80094dc:	43db      	mvns	r3, r3
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	4013      	ands	r3, r2
 80094e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	691a      	ldr	r2, [r3, #16]
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	fa02 f303 	lsl.w	r3, r2, r3
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	08da      	lsrs	r2, r3, #3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	3208      	adds	r2, #8
 8009502:	69b9      	ldr	r1, [r7, #24]
 8009504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	2203      	movs	r2, #3
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	43db      	mvns	r3, r3
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	4013      	ands	r3, r2
 800951e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	f003 0203 	and.w	r2, r3, #3
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	fa02 f303 	lsl.w	r3, r2, r3
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	4313      	orrs	r3, r2
 8009534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 80a2 	beq.w	800968e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	4b57      	ldr	r3, [pc, #348]	@ (80096ac <HAL_GPIO_Init+0x2e8>)
 8009550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009552:	4a56      	ldr	r2, [pc, #344]	@ (80096ac <HAL_GPIO_Init+0x2e8>)
 8009554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009558:	6453      	str	r3, [r2, #68]	@ 0x44
 800955a:	4b54      	ldr	r3, [pc, #336]	@ (80096ac <HAL_GPIO_Init+0x2e8>)
 800955c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800955e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009566:	4a52      	ldr	r2, [pc, #328]	@ (80096b0 <HAL_GPIO_Init+0x2ec>)
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	089b      	lsrs	r3, r3, #2
 800956c:	3302      	adds	r3, #2
 800956e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	220f      	movs	r2, #15
 800957e:	fa02 f303 	lsl.w	r3, r2, r3
 8009582:	43db      	mvns	r3, r3
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	4013      	ands	r3, r2
 8009588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a49      	ldr	r2, [pc, #292]	@ (80096b4 <HAL_GPIO_Init+0x2f0>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d019      	beq.n	80095c6 <HAL_GPIO_Init+0x202>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a48      	ldr	r2, [pc, #288]	@ (80096b8 <HAL_GPIO_Init+0x2f4>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d013      	beq.n	80095c2 <HAL_GPIO_Init+0x1fe>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a47      	ldr	r2, [pc, #284]	@ (80096bc <HAL_GPIO_Init+0x2f8>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d00d      	beq.n	80095be <HAL_GPIO_Init+0x1fa>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a46      	ldr	r2, [pc, #280]	@ (80096c0 <HAL_GPIO_Init+0x2fc>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d007      	beq.n	80095ba <HAL_GPIO_Init+0x1f6>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a45      	ldr	r2, [pc, #276]	@ (80096c4 <HAL_GPIO_Init+0x300>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d101      	bne.n	80095b6 <HAL_GPIO_Init+0x1f2>
 80095b2:	2304      	movs	r3, #4
 80095b4:	e008      	b.n	80095c8 <HAL_GPIO_Init+0x204>
 80095b6:	2307      	movs	r3, #7
 80095b8:	e006      	b.n	80095c8 <HAL_GPIO_Init+0x204>
 80095ba:	2303      	movs	r3, #3
 80095bc:	e004      	b.n	80095c8 <HAL_GPIO_Init+0x204>
 80095be:	2302      	movs	r3, #2
 80095c0:	e002      	b.n	80095c8 <HAL_GPIO_Init+0x204>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e000      	b.n	80095c8 <HAL_GPIO_Init+0x204>
 80095c6:	2300      	movs	r3, #0
 80095c8:	69fa      	ldr	r2, [r7, #28]
 80095ca:	f002 0203 	and.w	r2, r2, #3
 80095ce:	0092      	lsls	r2, r2, #2
 80095d0:	4093      	lsls	r3, r2
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80095d8:	4935      	ldr	r1, [pc, #212]	@ (80096b0 <HAL_GPIO_Init+0x2ec>)
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	089b      	lsrs	r3, r3, #2
 80095de:	3302      	adds	r3, #2
 80095e0:	69ba      	ldr	r2, [r7, #24]
 80095e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80095e6:	4b38      	ldr	r3, [pc, #224]	@ (80096c8 <HAL_GPIO_Init+0x304>)
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	43db      	mvns	r3, r3
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	4013      	ands	r3, r2
 80095f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009602:	69ba      	ldr	r2, [r7, #24]
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	4313      	orrs	r3, r2
 8009608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800960a:	4a2f      	ldr	r2, [pc, #188]	@ (80096c8 <HAL_GPIO_Init+0x304>)
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009610:	4b2d      	ldr	r3, [pc, #180]	@ (80096c8 <HAL_GPIO_Init+0x304>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	43db      	mvns	r3, r3
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	4013      	ands	r3, r2
 800961e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	4313      	orrs	r3, r2
 8009632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009634:	4a24      	ldr	r2, [pc, #144]	@ (80096c8 <HAL_GPIO_Init+0x304>)
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800963a:	4b23      	ldr	r3, [pc, #140]	@ (80096c8 <HAL_GPIO_Init+0x304>)
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	43db      	mvns	r3, r3
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	4013      	ands	r3, r2
 8009648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009656:	69ba      	ldr	r2, [r7, #24]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	4313      	orrs	r3, r2
 800965c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800965e:	4a1a      	ldr	r2, [pc, #104]	@ (80096c8 <HAL_GPIO_Init+0x304>)
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009664:	4b18      	ldr	r3, [pc, #96]	@ (80096c8 <HAL_GPIO_Init+0x304>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	43db      	mvns	r3, r3
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	4013      	ands	r3, r2
 8009672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d003      	beq.n	8009688 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	4313      	orrs	r3, r2
 8009686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009688:	4a0f      	ldr	r2, [pc, #60]	@ (80096c8 <HAL_GPIO_Init+0x304>)
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	3301      	adds	r3, #1
 8009692:	61fb      	str	r3, [r7, #28]
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	2b0f      	cmp	r3, #15
 8009698:	f67f aea2 	bls.w	80093e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800969c:	bf00      	nop
 800969e:	bf00      	nop
 80096a0:	3724      	adds	r7, #36	@ 0x24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40023800 	.word	0x40023800
 80096b0:	40013800 	.word	0x40013800
 80096b4:	40020000 	.word	0x40020000
 80096b8:	40020400 	.word	0x40020400
 80096bc:	40020800 	.word	0x40020800
 80096c0:	40020c00 	.word	0x40020c00
 80096c4:	40021000 	.word	0x40021000
 80096c8:	40013c00 	.word	0x40013c00

080096cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	807b      	strh	r3, [r7, #2]
 80096d8:	4613      	mov	r3, r2
 80096da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80096dc:	787b      	ldrb	r3, [r7, #1]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096e2:	887a      	ldrh	r2, [r7, #2]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80096e8:	e003      	b.n	80096f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80096ea:	887b      	ldrh	r3, [r7, #2]
 80096ec:	041a      	lsls	r2, r3, #16
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	619a      	str	r2, [r3, #24]
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
	...

08009700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e267      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d075      	beq.n	800980a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800971e:	4b88      	ldr	r3, [pc, #544]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f003 030c 	and.w	r3, r3, #12
 8009726:	2b04      	cmp	r3, #4
 8009728:	d00c      	beq.n	8009744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800972a:	4b85      	ldr	r3, [pc, #532]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009732:	2b08      	cmp	r3, #8
 8009734:	d112      	bne.n	800975c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009736:	4b82      	ldr	r3, [pc, #520]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800973e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009742:	d10b      	bne.n	800975c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009744:	4b7e      	ldr	r3, [pc, #504]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d05b      	beq.n	8009808 <HAL_RCC_OscConfig+0x108>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d157      	bne.n	8009808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e242      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009764:	d106      	bne.n	8009774 <HAL_RCC_OscConfig+0x74>
 8009766:	4b76      	ldr	r3, [pc, #472]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a75      	ldr	r2, [pc, #468]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800976c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	e01d      	b.n	80097b0 <HAL_RCC_OscConfig+0xb0>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800977c:	d10c      	bne.n	8009798 <HAL_RCC_OscConfig+0x98>
 800977e:	4b70      	ldr	r3, [pc, #448]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a6f      	ldr	r2, [pc, #444]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	4b6d      	ldr	r3, [pc, #436]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a6c      	ldr	r2, [pc, #432]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	e00b      	b.n	80097b0 <HAL_RCC_OscConfig+0xb0>
 8009798:	4b69      	ldr	r3, [pc, #420]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a68      	ldr	r2, [pc, #416]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800979e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	4b66      	ldr	r3, [pc, #408]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a65      	ldr	r2, [pc, #404]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80097aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d013      	beq.n	80097e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097b8:	f7ff f948 	bl	8008a4c <HAL_GetTick>
 80097bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097be:	e008      	b.n	80097d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097c0:	f7ff f944 	bl	8008a4c <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	2b64      	cmp	r3, #100	@ 0x64
 80097cc:	d901      	bls.n	80097d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e207      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097d2:	4b5b      	ldr	r3, [pc, #364]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0f0      	beq.n	80097c0 <HAL_RCC_OscConfig+0xc0>
 80097de:	e014      	b.n	800980a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097e0:	f7ff f934 	bl	8008a4c <HAL_GetTick>
 80097e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097e6:	e008      	b.n	80097fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097e8:	f7ff f930 	bl	8008a4c <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b64      	cmp	r3, #100	@ 0x64
 80097f4:	d901      	bls.n	80097fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e1f3      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097fa:	4b51      	ldr	r3, [pc, #324]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1f0      	bne.n	80097e8 <HAL_RCC_OscConfig+0xe8>
 8009806:	e000      	b.n	800980a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d063      	beq.n	80098de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009816:	4b4a      	ldr	r3, [pc, #296]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f003 030c 	and.w	r3, r3, #12
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009822:	4b47      	ldr	r3, [pc, #284]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800982a:	2b08      	cmp	r3, #8
 800982c:	d11c      	bne.n	8009868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800982e:	4b44      	ldr	r3, [pc, #272]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d116      	bne.n	8009868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800983a:	4b41      	ldr	r3, [pc, #260]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0302 	and.w	r3, r3, #2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d005      	beq.n	8009852 <HAL_RCC_OscConfig+0x152>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d001      	beq.n	8009852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e1c7      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009852:	4b3b      	ldr	r3, [pc, #236]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	4937      	ldr	r1, [pc, #220]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009862:	4313      	orrs	r3, r2
 8009864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009866:	e03a      	b.n	80098de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d020      	beq.n	80098b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009870:	4b34      	ldr	r3, [pc, #208]	@ (8009944 <HAL_RCC_OscConfig+0x244>)
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009876:	f7ff f8e9 	bl	8008a4c <HAL_GetTick>
 800987a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800987c:	e008      	b.n	8009890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800987e:	f7ff f8e5 	bl	8008a4c <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b02      	cmp	r3, #2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e1a8      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009890:	4b2b      	ldr	r3, [pc, #172]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0f0      	beq.n	800987e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800989c:	4b28      	ldr	r3, [pc, #160]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	4925      	ldr	r1, [pc, #148]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	600b      	str	r3, [r1, #0]
 80098b0:	e015      	b.n	80098de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098b2:	4b24      	ldr	r3, [pc, #144]	@ (8009944 <HAL_RCC_OscConfig+0x244>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b8:	f7ff f8c8 	bl	8008a4c <HAL_GetTick>
 80098bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098be:	e008      	b.n	80098d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098c0:	f7ff f8c4 	bl	8008a4c <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d901      	bls.n	80098d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e187      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0302 	and.w	r3, r3, #2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1f0      	bne.n	80098c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0308 	and.w	r3, r3, #8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d036      	beq.n	8009958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d016      	beq.n	8009920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098f2:	4b15      	ldr	r3, [pc, #84]	@ (8009948 <HAL_RCC_OscConfig+0x248>)
 80098f4:	2201      	movs	r2, #1
 80098f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098f8:	f7ff f8a8 	bl	8008a4c <HAL_GetTick>
 80098fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098fe:	e008      	b.n	8009912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009900:	f7ff f8a4 	bl	8008a4c <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	2b02      	cmp	r3, #2
 800990c:	d901      	bls.n	8009912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e167      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009912:	4b0b      	ldr	r3, [pc, #44]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0f0      	beq.n	8009900 <HAL_RCC_OscConfig+0x200>
 800991e:	e01b      	b.n	8009958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009920:	4b09      	ldr	r3, [pc, #36]	@ (8009948 <HAL_RCC_OscConfig+0x248>)
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009926:	f7ff f891 	bl	8008a4c <HAL_GetTick>
 800992a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800992c:	e00e      	b.n	800994c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800992e:	f7ff f88d 	bl	8008a4c <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d907      	bls.n	800994c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e150      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
 8009940:	40023800 	.word	0x40023800
 8009944:	42470000 	.word	0x42470000
 8009948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800994c:	4b88      	ldr	r3, [pc, #544]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 800994e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1ea      	bne.n	800992e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0304 	and.w	r3, r3, #4
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 8097 	beq.w	8009a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009966:	2300      	movs	r3, #0
 8009968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800996a:	4b81      	ldr	r3, [pc, #516]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 800996c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10f      	bne.n	8009996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
 800997a:	4b7d      	ldr	r3, [pc, #500]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 800997c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997e:	4a7c      	ldr	r2, [pc, #496]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009984:	6413      	str	r3, [r2, #64]	@ 0x40
 8009986:	4b7a      	ldr	r3, [pc, #488]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800998a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800998e:	60bb      	str	r3, [r7, #8]
 8009990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009992:	2301      	movs	r3, #1
 8009994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009996:	4b77      	ldr	r3, [pc, #476]	@ (8009b74 <HAL_RCC_OscConfig+0x474>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d118      	bne.n	80099d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099a2:	4b74      	ldr	r3, [pc, #464]	@ (8009b74 <HAL_RCC_OscConfig+0x474>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a73      	ldr	r2, [pc, #460]	@ (8009b74 <HAL_RCC_OscConfig+0x474>)
 80099a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099ae:	f7ff f84d 	bl	8008a4c <HAL_GetTick>
 80099b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099b4:	e008      	b.n	80099c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099b6:	f7ff f849 	bl	8008a4c <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e10c      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099c8:	4b6a      	ldr	r3, [pc, #424]	@ (8009b74 <HAL_RCC_OscConfig+0x474>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0f0      	beq.n	80099b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d106      	bne.n	80099ea <HAL_RCC_OscConfig+0x2ea>
 80099dc:	4b64      	ldr	r3, [pc, #400]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 80099de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099e0:	4a63      	ldr	r2, [pc, #396]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 80099e2:	f043 0301 	orr.w	r3, r3, #1
 80099e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80099e8:	e01c      	b.n	8009a24 <HAL_RCC_OscConfig+0x324>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	2b05      	cmp	r3, #5
 80099f0:	d10c      	bne.n	8009a0c <HAL_RCC_OscConfig+0x30c>
 80099f2:	4b5f      	ldr	r3, [pc, #380]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 80099f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099f6:	4a5e      	ldr	r2, [pc, #376]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 80099f8:	f043 0304 	orr.w	r3, r3, #4
 80099fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80099fe:	4b5c      	ldr	r3, [pc, #368]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a02:	4a5b      	ldr	r2, [pc, #364]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a04:	f043 0301 	orr.w	r3, r3, #1
 8009a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a0a:	e00b      	b.n	8009a24 <HAL_RCC_OscConfig+0x324>
 8009a0c:	4b58      	ldr	r3, [pc, #352]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a10:	4a57      	ldr	r2, [pc, #348]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a12:	f023 0301 	bic.w	r3, r3, #1
 8009a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a18:	4b55      	ldr	r3, [pc, #340]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a1c:	4a54      	ldr	r2, [pc, #336]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a1e:	f023 0304 	bic.w	r3, r3, #4
 8009a22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d015      	beq.n	8009a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2c:	f7ff f80e 	bl	8008a4c <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a32:	e00a      	b.n	8009a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a34:	f7ff f80a 	bl	8008a4c <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e0cb      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a4a:	4b49      	ldr	r3, [pc, #292]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0ee      	beq.n	8009a34 <HAL_RCC_OscConfig+0x334>
 8009a56:	e014      	b.n	8009a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a58:	f7fe fff8 	bl	8008a4c <HAL_GetTick>
 8009a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a5e:	e00a      	b.n	8009a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a60:	f7fe fff4 	bl	8008a4c <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e0b5      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a76:	4b3e      	ldr	r3, [pc, #248]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a7a:	f003 0302 	and.w	r3, r3, #2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1ee      	bne.n	8009a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d105      	bne.n	8009a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a88:	4b39      	ldr	r3, [pc, #228]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8c:	4a38      	ldr	r2, [pc, #224]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 80a1 	beq.w	8009be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a9e:	4b34      	ldr	r3, [pc, #208]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f003 030c 	and.w	r3, r3, #12
 8009aa6:	2b08      	cmp	r3, #8
 8009aa8:	d05c      	beq.n	8009b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d141      	bne.n	8009b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ab2:	4b31      	ldr	r3, [pc, #196]	@ (8009b78 <HAL_RCC_OscConfig+0x478>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ab8:	f7fe ffc8 	bl	8008a4c <HAL_GetTick>
 8009abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009abe:	e008      	b.n	8009ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ac0:	f7fe ffc4 	bl	8008a4c <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e087      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ad2:	4b27      	ldr	r3, [pc, #156]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1f0      	bne.n	8009ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	69da      	ldr	r2, [r3, #28]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aec:	019b      	lsls	r3, r3, #6
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	3b01      	subs	r3, #1
 8009af8:	041b      	lsls	r3, r3, #16
 8009afa:	431a      	orrs	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b00:	061b      	lsls	r3, r3, #24
 8009b02:	491b      	ldr	r1, [pc, #108]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b08:	4b1b      	ldr	r3, [pc, #108]	@ (8009b78 <HAL_RCC_OscConfig+0x478>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b0e:	f7fe ff9d 	bl	8008a4c <HAL_GetTick>
 8009b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b14:	e008      	b.n	8009b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b16:	f7fe ff99 	bl	8008a4c <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d901      	bls.n	8009b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e05c      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b28:	4b11      	ldr	r3, [pc, #68]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0f0      	beq.n	8009b16 <HAL_RCC_OscConfig+0x416>
 8009b34:	e054      	b.n	8009be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b36:	4b10      	ldr	r3, [pc, #64]	@ (8009b78 <HAL_RCC_OscConfig+0x478>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b3c:	f7fe ff86 	bl	8008a4c <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b44:	f7fe ff82 	bl	8008a4c <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e045      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b56:	4b06      	ldr	r3, [pc, #24]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f0      	bne.n	8009b44 <HAL_RCC_OscConfig+0x444>
 8009b62:	e03d      	b.n	8009be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d107      	bne.n	8009b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e038      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
 8009b70:	40023800 	.word	0x40023800
 8009b74:	40007000 	.word	0x40007000
 8009b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8009bec <HAL_RCC_OscConfig+0x4ec>)
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d028      	beq.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d121      	bne.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d11a      	bne.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009bac:	4013      	ands	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d111      	bne.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d107      	bne.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d001      	beq.n	8009be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e000      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	40023800 	.word	0x40023800

08009bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e0cc      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c04:	4b68      	ldr	r3, [pc, #416]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0307 	and.w	r3, r3, #7
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d90c      	bls.n	8009c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c12:	4b65      	ldr	r3, [pc, #404]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	b2d2      	uxtb	r2, r2
 8009c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c1a:	4b63      	ldr	r3, [pc, #396]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0307 	and.w	r3, r3, #7
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d001      	beq.n	8009c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e0b8      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d020      	beq.n	8009c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d005      	beq.n	8009c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c44:	4b59      	ldr	r3, [pc, #356]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	4a58      	ldr	r2, [pc, #352]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0308 	and.w	r3, r3, #8
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c5c:	4b53      	ldr	r3, [pc, #332]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	4a52      	ldr	r2, [pc, #328]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c68:	4b50      	ldr	r3, [pc, #320]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	494d      	ldr	r1, [pc, #308]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d044      	beq.n	8009d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d107      	bne.n	8009c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c8e:	4b47      	ldr	r3, [pc, #284]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d119      	bne.n	8009cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e07f      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d003      	beq.n	8009cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d107      	bne.n	8009cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cae:	4b3f      	ldr	r3, [pc, #252]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d109      	bne.n	8009cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e06f      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e067      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009cce:	4b37      	ldr	r3, [pc, #220]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f023 0203 	bic.w	r2, r3, #3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	4934      	ldr	r1, [pc, #208]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ce0:	f7fe feb4 	bl	8008a4c <HAL_GetTick>
 8009ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ce6:	e00a      	b.n	8009cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ce8:	f7fe feb0 	bl	8008a4c <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d901      	bls.n	8009cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e04f      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f003 020c 	and.w	r2, r3, #12
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d1eb      	bne.n	8009ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d10:	4b25      	ldr	r3, [pc, #148]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0307 	and.w	r3, r3, #7
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d20c      	bcs.n	8009d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d1e:	4b22      	ldr	r3, [pc, #136]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	b2d2      	uxtb	r2, r2
 8009d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d26:	4b20      	ldr	r3, [pc, #128]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0307 	and.w	r3, r3, #7
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d001      	beq.n	8009d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e032      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d008      	beq.n	8009d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d44:	4b19      	ldr	r3, [pc, #100]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	4916      	ldr	r1, [pc, #88]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0308 	and.w	r3, r3, #8
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d62:	4b12      	ldr	r3, [pc, #72]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	490e      	ldr	r1, [pc, #56]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d76:	f000 f821 	bl	8009dbc <HAL_RCC_GetSysClockFreq>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	091b      	lsrs	r3, r3, #4
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	490a      	ldr	r1, [pc, #40]	@ (8009db0 <HAL_RCC_ClockConfig+0x1c0>)
 8009d88:	5ccb      	ldrb	r3, [r1, r3]
 8009d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d8e:	4a09      	ldr	r2, [pc, #36]	@ (8009db4 <HAL_RCC_ClockConfig+0x1c4>)
 8009d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009d92:	4b09      	ldr	r3, [pc, #36]	@ (8009db8 <HAL_RCC_ClockConfig+0x1c8>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fe fe14 	bl	80089c4 <HAL_InitTick>

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	40023c00 	.word	0x40023c00
 8009dac:	40023800 	.word	0x40023800
 8009db0:	0800af08 	.word	0x0800af08
 8009db4:	20000000 	.word	0x20000000
 8009db8:	20000004 	.word	0x20000004

08009dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dc0:	b090      	sub	sp, #64	@ 0x40
 8009dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc8:	2300      	movs	r3, #0
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dcc:	2300      	movs	r3, #0
 8009dce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009dd4:	4b59      	ldr	r3, [pc, #356]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f003 030c 	and.w	r3, r3, #12
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d00d      	beq.n	8009dfc <HAL_RCC_GetSysClockFreq+0x40>
 8009de0:	2b08      	cmp	r3, #8
 8009de2:	f200 80a1 	bhi.w	8009f28 <HAL_RCC_GetSysClockFreq+0x16c>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <HAL_RCC_GetSysClockFreq+0x34>
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d003      	beq.n	8009df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8009dee:	e09b      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009df0:	4b53      	ldr	r3, [pc, #332]	@ (8009f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8009df2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009df4:	e09b      	b.n	8009f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009df6:	4b53      	ldr	r3, [pc, #332]	@ (8009f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8009df8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009dfa:	e098      	b.n	8009f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e04:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e06:	4b4d      	ldr	r3, [pc, #308]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d028      	beq.n	8009e64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e12:	4b4a      	ldr	r3, [pc, #296]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	099b      	lsrs	r3, r3, #6
 8009e18:	2200      	movs	r2, #0
 8009e1a:	623b      	str	r3, [r7, #32]
 8009e1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009e24:	2100      	movs	r1, #0
 8009e26:	4b47      	ldr	r3, [pc, #284]	@ (8009f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8009e28:	fb03 f201 	mul.w	r2, r3, r1
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	fb00 f303 	mul.w	r3, r0, r3
 8009e32:	4413      	add	r3, r2
 8009e34:	4a43      	ldr	r2, [pc, #268]	@ (8009f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8009e36:	fba0 1202 	umull	r1, r2, r0, r2
 8009e3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e3c:	460a      	mov	r2, r1
 8009e3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e42:	4413      	add	r3, r2
 8009e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e48:	2200      	movs	r2, #0
 8009e4a:	61bb      	str	r3, [r7, #24]
 8009e4c:	61fa      	str	r2, [r7, #28]
 8009e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009e56:	f7fe f9bd 	bl	80081d4 <__aeabi_uldivmod>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4613      	mov	r3, r2
 8009e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e62:	e053      	b.n	8009f0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e64:	4b35      	ldr	r3, [pc, #212]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	099b      	lsrs	r3, r3, #6
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	617a      	str	r2, [r7, #20]
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009e76:	f04f 0b00 	mov.w	fp, #0
 8009e7a:	4652      	mov	r2, sl
 8009e7c:	465b      	mov	r3, fp
 8009e7e:	f04f 0000 	mov.w	r0, #0
 8009e82:	f04f 0100 	mov.w	r1, #0
 8009e86:	0159      	lsls	r1, r3, #5
 8009e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e8c:	0150      	lsls	r0, r2, #5
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	ebb2 080a 	subs.w	r8, r2, sl
 8009e96:	eb63 090b 	sbc.w	r9, r3, fp
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	f04f 0300 	mov.w	r3, #0
 8009ea2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009ea6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009eaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009eae:	ebb2 0408 	subs.w	r4, r2, r8
 8009eb2:	eb63 0509 	sbc.w	r5, r3, r9
 8009eb6:	f04f 0200 	mov.w	r2, #0
 8009eba:	f04f 0300 	mov.w	r3, #0
 8009ebe:	00eb      	lsls	r3, r5, #3
 8009ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ec4:	00e2      	lsls	r2, r4, #3
 8009ec6:	4614      	mov	r4, r2
 8009ec8:	461d      	mov	r5, r3
 8009eca:	eb14 030a 	adds.w	r3, r4, sl
 8009ece:	603b      	str	r3, [r7, #0]
 8009ed0:	eb45 030b 	adc.w	r3, r5, fp
 8009ed4:	607b      	str	r3, [r7, #4]
 8009ed6:	f04f 0200 	mov.w	r2, #0
 8009eda:	f04f 0300 	mov.w	r3, #0
 8009ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	028b      	lsls	r3, r1, #10
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009eec:	4621      	mov	r1, r4
 8009eee:	028a      	lsls	r2, r1, #10
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	60bb      	str	r3, [r7, #8]
 8009efa:	60fa      	str	r2, [r7, #12]
 8009efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f00:	f7fe f968 	bl	80081d4 <__aeabi_uldivmod>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4613      	mov	r3, r2
 8009f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	0c1b      	lsrs	r3, r3, #16
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	3301      	adds	r3, #1
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8009f1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f26:	e002      	b.n	8009f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f28:	4b05      	ldr	r3, [pc, #20]	@ (8009f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8009f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3740      	adds	r7, #64	@ 0x40
 8009f34:	46bd      	mov	sp, r7
 8009f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f3a:	bf00      	nop
 8009f3c:	40023800 	.word	0x40023800
 8009f40:	00f42400 	.word	0x00f42400
 8009f44:	017d7840 	.word	0x017d7840

08009f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f4c:	4b03      	ldr	r3, [pc, #12]	@ (8009f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000000 	.word	0x20000000

08009f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f64:	f7ff fff0 	bl	8009f48 <HAL_RCC_GetHCLKFreq>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	4b05      	ldr	r3, [pc, #20]	@ (8009f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	0a9b      	lsrs	r3, r3, #10
 8009f70:	f003 0307 	and.w	r3, r3, #7
 8009f74:	4903      	ldr	r1, [pc, #12]	@ (8009f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f76:	5ccb      	ldrb	r3, [r1, r3]
 8009f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40023800 	.word	0x40023800
 8009f84:	0800af18 	.word	0x0800af18

08009f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009f8c:	f7ff ffdc 	bl	8009f48 <HAL_RCC_GetHCLKFreq>
 8009f90:	4602      	mov	r2, r0
 8009f92:	4b05      	ldr	r3, [pc, #20]	@ (8009fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	0b5b      	lsrs	r3, r3, #13
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	4903      	ldr	r1, [pc, #12]	@ (8009fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f9e:	5ccb      	ldrb	r3, [r1, r3]
 8009fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	40023800 	.word	0x40023800
 8009fac:	0800af18 	.word	0x0800af18

08009fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e042      	b.n	800a048 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d106      	bne.n	8009fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7fe fc08 	bl	80087ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2224      	movs	r2, #36	@ 0x24
 8009fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68da      	ldr	r2, [r3, #12]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fcdb 	bl	800a9b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	691a      	ldr	r2, [r3, #16]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	695a      	ldr	r2, [r3, #20]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68da      	ldr	r2, [r3, #12]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2220      	movs	r2, #32
 800a034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	4613      	mov	r3, r2
 800a05c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b20      	cmp	r3, #32
 800a068:	d112      	bne.n	800a090 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <HAL_UART_Receive_IT+0x26>
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e00b      	b.n	800a092 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a080:	88fb      	ldrh	r3, [r7, #6]
 800a082:	461a      	mov	r2, r3
 800a084:	68b9      	ldr	r1, [r7, #8]
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 faba 	bl	800a600 <UART_Start_Receive_IT>
 800a08c:	4603      	mov	r3, r0
 800a08e:	e000      	b.n	800a092 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a090:	2302      	movs	r3, #2
  }
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
	...

0800a09c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b0ba      	sub	sp, #232	@ 0xe8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0d2:	f003 030f 	and.w	r3, r3, #15
 800a0d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a0da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10f      	bne.n	800a102 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0e6:	f003 0320 	and.w	r3, r3, #32
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d009      	beq.n	800a102 <HAL_UART_IRQHandler+0x66>
 800a0ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0f2:	f003 0320 	and.w	r3, r3, #32
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fb99 	bl	800a832 <UART_Receive_IT>
      return;
 800a100:	e25b      	b.n	800a5ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 80de 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x22c>
 800a10c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	d106      	bne.n	800a126 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a11c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 80d1 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00b      	beq.n	800a14a <HAL_UART_IRQHandler+0xae>
 800a132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d005      	beq.n	800a14a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a142:	f043 0201 	orr.w	r2, r3, #1
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a14e:	f003 0304 	and.w	r3, r3, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00b      	beq.n	800a16e <HAL_UART_IRQHandler+0xd2>
 800a156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d005      	beq.n	800a16e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a166:	f043 0202 	orr.w	r2, r3, #2
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a16e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00b      	beq.n	800a192 <HAL_UART_IRQHandler+0xf6>
 800a17a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	2b00      	cmp	r3, #0
 800a184:	d005      	beq.n	800a192 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a18a:	f043 0204 	orr.w	r2, r3, #4
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a196:	f003 0308 	and.w	r3, r3, #8
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d011      	beq.n	800a1c2 <HAL_UART_IRQHandler+0x126>
 800a19e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d105      	bne.n	800a1b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a1aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d005      	beq.n	800a1c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ba:	f043 0208 	orr.w	r2, r3, #8
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 81f2 	beq.w	800a5b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1d0:	f003 0320 	and.w	r3, r3, #32
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d008      	beq.n	800a1ea <HAL_UART_IRQHandler+0x14e>
 800a1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fb24 	bl	800a832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f4:	2b40      	cmp	r3, #64	@ 0x40
 800a1f6:	bf0c      	ite	eq
 800a1f8:	2301      	moveq	r3, #1
 800a1fa:	2300      	movne	r3, #0
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a206:	f003 0308 	and.w	r3, r3, #8
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d103      	bne.n	800a216 <HAL_UART_IRQHandler+0x17a>
 800a20e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d04f      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fa2c 	bl	800a674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a226:	2b40      	cmp	r3, #64	@ 0x40
 800a228:	d141      	bne.n	800a2ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3314      	adds	r3, #20
 800a230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3314      	adds	r3, #20
 800a252:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a256:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a25a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a262:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a26e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1d9      	bne.n	800a22a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d013      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a282:	4a7e      	ldr	r2, [pc, #504]	@ (800a47c <HAL_UART_IRQHandler+0x3e0>)
 800a284:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fe fd8f 	bl	8008dae <HAL_DMA_Abort_IT>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d016      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a29a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a4:	e00e      	b.n	800a2c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f994 	bl	800a5d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ac:	e00a      	b.n	800a2c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f990 	bl	800a5d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b4:	e006      	b.n	800a2c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f98c 	bl	800a5d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a2c2:	e175      	b.n	800a5b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c4:	bf00      	nop
    return;
 800a2c6:	e173      	b.n	800a5b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	f040 814f 	bne.w	800a570 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2d6:	f003 0310 	and.w	r3, r3, #16
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 8148 	beq.w	800a570 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2e4:	f003 0310 	and.w	r3, r3, #16
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 8141 	beq.w	800a570 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60bb      	str	r3, [r7, #8]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60bb      	str	r3, [r7, #8]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	60bb      	str	r3, [r7, #8]
 800a302:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a30e:	2b40      	cmp	r3, #64	@ 0x40
 800a310:	f040 80b6 	bne.w	800a480 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a320:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 8145 	beq.w	800a5b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a32e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a332:	429a      	cmp	r2, r3
 800a334:	f080 813e 	bcs.w	800a5b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a33e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a34a:	f000 8088 	beq.w	800a45e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	330c      	adds	r3, #12
 800a354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a364:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a36c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	330c      	adds	r3, #12
 800a376:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a37a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a37e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a382:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a386:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a38a:	e841 2300 	strex	r3, r2, [r1]
 800a38e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1d9      	bne.n	800a34e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3314      	adds	r3, #20
 800a3a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3a4:	e853 3f00 	ldrex	r3, [r3]
 800a3a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a3aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a3ac:	f023 0301 	bic.w	r3, r3, #1
 800a3b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3314      	adds	r3, #20
 800a3ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a3be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a3c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a3c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a3d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e1      	bne.n	800a39a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3314      	adds	r3, #20
 800a3dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a3e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3314      	adds	r3, #20
 800a3f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a3fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a400:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a402:	e841 2300 	strex	r3, r2, [r1]
 800a406:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e3      	bne.n	800a3d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2220      	movs	r2, #32
 800a412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	330c      	adds	r3, #12
 800a422:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a426:	e853 3f00 	ldrex	r3, [r3]
 800a42a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a42c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a42e:	f023 0310 	bic.w	r3, r3, #16
 800a432:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	330c      	adds	r3, #12
 800a43c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a440:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a442:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a446:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a44e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e3      	bne.n	800a41c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fe fc38 	bl	8008cce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2202      	movs	r2, #2
 800a462:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	b29b      	uxth	r3, r3
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f8b7 	bl	800a5e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a47a:	e09b      	b.n	800a5b4 <HAL_UART_IRQHandler+0x518>
 800a47c:	0800a73b 	.word	0x0800a73b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a488:	b29b      	uxth	r3, r3
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a494:	b29b      	uxth	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 808e 	beq.w	800a5b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a49c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 8089 	beq.w	800a5b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	330c      	adds	r3, #12
 800a4ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b0:	e853 3f00 	ldrex	r3, [r3]
 800a4b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	330c      	adds	r3, #12
 800a4c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a4ca:	647a      	str	r2, [r7, #68]	@ 0x44
 800a4cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4d2:	e841 2300 	strex	r3, r2, [r1]
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e3      	bne.n	800a4a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3314      	adds	r3, #20
 800a4e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	e853 3f00 	ldrex	r3, [r3]
 800a4ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	f023 0301 	bic.w	r3, r3, #1
 800a4f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3314      	adds	r3, #20
 800a4fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a502:	633a      	str	r2, [r7, #48]	@ 0x30
 800a504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a50a:	e841 2300 	strex	r3, r2, [r1]
 800a50e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e3      	bne.n	800a4de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2220      	movs	r2, #32
 800a51a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	330c      	adds	r3, #12
 800a52a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	e853 3f00 	ldrex	r3, [r3]
 800a532:	60fb      	str	r3, [r7, #12]
   return(result);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0310 	bic.w	r3, r3, #16
 800a53a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	330c      	adds	r3, #12
 800a544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a548:	61fa      	str	r2, [r7, #28]
 800a54a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54c:	69b9      	ldr	r1, [r7, #24]
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	e841 2300 	strex	r3, r2, [r1]
 800a554:	617b      	str	r3, [r7, #20]
   return(result);
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e3      	bne.n	800a524 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a562:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f83d 	bl	800a5e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a56e:	e023      	b.n	800a5b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d009      	beq.n	800a590 <HAL_UART_IRQHandler+0x4f4>
 800a57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f8ea 	bl	800a762 <UART_Transmit_IT>
    return;
 800a58e:	e014      	b.n	800a5ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00e      	beq.n	800a5ba <HAL_UART_IRQHandler+0x51e>
 800a59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d008      	beq.n	800a5ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f92a 	bl	800a802 <UART_EndTransmit_IT>
    return;
 800a5ae:	e004      	b.n	800a5ba <HAL_UART_IRQHandler+0x51e>
    return;
 800a5b0:	bf00      	nop
 800a5b2:	e002      	b.n	800a5ba <HAL_UART_IRQHandler+0x51e>
      return;
 800a5b4:	bf00      	nop
 800a5b6:	e000      	b.n	800a5ba <HAL_UART_IRQHandler+0x51e>
      return;
 800a5b8:	bf00      	nop
  }
}
 800a5ba:	37e8      	adds	r7, #232	@ 0xe8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	4613      	mov	r3, r2
 800a60c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	88fa      	ldrh	r2, [r7, #6]
 800a618:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2222      	movs	r2, #34	@ 0x22
 800a62a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d007      	beq.n	800a646 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68da      	ldr	r2, [r3, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a644:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	695a      	ldr	r2, [r3, #20]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f042 0201 	orr.w	r2, r2, #1
 800a654:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f042 0220 	orr.w	r2, r2, #32
 800a664:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a674:	b480      	push	{r7}
 800a676:	b095      	sub	sp, #84	@ 0x54
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	330c      	adds	r3, #12
 800a682:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a686:	e853 3f00 	ldrex	r3, [r3]
 800a68a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	330c      	adds	r3, #12
 800a69a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a69c:	643a      	str	r2, [r7, #64]	@ 0x40
 800a69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6a4:	e841 2300 	strex	r3, r2, [r1]
 800a6a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1e5      	bne.n	800a67c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3314      	adds	r3, #20
 800a6b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	e853 3f00 	ldrex	r3, [r3]
 800a6be:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f023 0301 	bic.w	r3, r3, #1
 800a6c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3314      	adds	r3, #20
 800a6ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e5      	bne.n	800a6b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d119      	bne.n	800a720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	330c      	adds	r3, #12
 800a6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	e853 3f00 	ldrex	r3, [r3]
 800a6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f023 0310 	bic.w	r3, r3, #16
 800a702:	647b      	str	r3, [r7, #68]	@ 0x44
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	330c      	adds	r3, #12
 800a70a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a70c:	61ba      	str	r2, [r7, #24]
 800a70e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	6979      	ldr	r1, [r7, #20]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	e841 2300 	strex	r3, r2, [r1]
 800a718:	613b      	str	r3, [r7, #16]
   return(result);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1e5      	bne.n	800a6ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a72e:	bf00      	nop
 800a730:	3754      	adds	r7, #84	@ 0x54
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7ff ff3d 	bl	800a5d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a75a:	bf00      	nop
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a762:	b480      	push	{r7}
 800a764:	b085      	sub	sp, #20
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b21      	cmp	r3, #33	@ 0x21
 800a774:	d13e      	bne.n	800a7f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a77e:	d114      	bne.n	800a7aa <UART_Transmit_IT+0x48>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d110      	bne.n	800a7aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a1b      	ldr	r3, [r3, #32]
 800a78c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a79c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	1c9a      	adds	r2, r3, #2
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	621a      	str	r2, [r3, #32]
 800a7a8:	e008      	b.n	800a7bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	1c59      	adds	r1, r3, #1
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	6211      	str	r1, [r2, #32]
 800a7b4:	781a      	ldrb	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10f      	bne.n	800a7f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a7de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68da      	ldr	r2, [r3, #12]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e000      	b.n	800a7f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a7f4:	2302      	movs	r3, #2
  }
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68da      	ldr	r2, [r3, #12]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2220      	movs	r2, #32
 800a81e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fecc 	bl	800a5c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b08c      	sub	sp, #48	@ 0x30
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b22      	cmp	r3, #34	@ 0x22
 800a844:	f040 80ae 	bne.w	800a9a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a850:	d117      	bne.n	800a882 <UART_Receive_IT+0x50>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d113      	bne.n	800a882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a862:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a870:	b29a      	uxth	r2, r3
 800a872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a87a:	1c9a      	adds	r2, r3, #2
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a880:	e026      	b.n	800a8d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a886:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a888:	2300      	movs	r3, #0
 800a88a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a894:	d007      	beq.n	800a8a6 <UART_Receive_IT+0x74>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10a      	bne.n	800a8b4 <UART_Receive_IT+0x82>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	e008      	b.n	800a8c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d15d      	bne.n	800a9a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 0220 	bic.w	r2, r2, #32
 800a8f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68da      	ldr	r2, [r3, #12]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	695a      	ldr	r2, [r3, #20]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2220      	movs	r2, #32
 800a918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a926:	2b01      	cmp	r3, #1
 800a928:	d135      	bne.n	800a996 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	330c      	adds	r3, #12
 800a936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	613b      	str	r3, [r7, #16]
   return(result);
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	f023 0310 	bic.w	r3, r3, #16
 800a946:	627b      	str	r3, [r7, #36]	@ 0x24
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	330c      	adds	r3, #12
 800a94e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a950:	623a      	str	r2, [r7, #32]
 800a952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	69f9      	ldr	r1, [r7, #28]
 800a956:	6a3a      	ldr	r2, [r7, #32]
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e5      	bne.n	800a930 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0310 	and.w	r3, r3, #16
 800a96e:	2b10      	cmp	r3, #16
 800a970:	d10a      	bne.n	800a988 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a972:	2300      	movs	r3, #0
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a98c:	4619      	mov	r1, r3
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff fe2a 	bl	800a5e8 <HAL_UARTEx_RxEventCallback>
 800a994:	e002      	b.n	800a99c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7fd fdee 	bl	8008578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	e002      	b.n	800a9a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	e000      	b.n	800a9a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a9a4:	2302      	movs	r3, #2
  }
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3730      	adds	r7, #48	@ 0x30
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9b4:	b0c0      	sub	sp, #256	@ 0x100
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9cc:	68d9      	ldr	r1, [r3, #12]
 800a9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	ea40 0301 	orr.w	r3, r0, r1
 800a9d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9de:	689a      	ldr	r2, [r3, #8]
 800a9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aa08:	f021 010c 	bic.w	r1, r1, #12
 800aa0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aa16:	430b      	orrs	r3, r1
 800aa18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aa26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa2a:	6999      	ldr	r1, [r3, #24]
 800aa2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	ea40 0301 	orr.w	r3, r0, r1
 800aa36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	4b8f      	ldr	r3, [pc, #572]	@ (800ac7c <UART_SetConfig+0x2cc>)
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d005      	beq.n	800aa50 <UART_SetConfig+0xa0>
 800aa44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	4b8d      	ldr	r3, [pc, #564]	@ (800ac80 <UART_SetConfig+0x2d0>)
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d104      	bne.n	800aa5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa50:	f7ff fa9a 	bl	8009f88 <HAL_RCC_GetPCLK2Freq>
 800aa54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800aa58:	e003      	b.n	800aa62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa5a:	f7ff fa81 	bl	8009f60 <HAL_RCC_GetPCLK1Freq>
 800aa5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa66:	69db      	ldr	r3, [r3, #28]
 800aa68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa6c:	f040 810c 	bne.w	800ac88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aa7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aa7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aa82:	4622      	mov	r2, r4
 800aa84:	462b      	mov	r3, r5
 800aa86:	1891      	adds	r1, r2, r2
 800aa88:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aa8a:	415b      	adcs	r3, r3
 800aa8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800aa92:	4621      	mov	r1, r4
 800aa94:	eb12 0801 	adds.w	r8, r2, r1
 800aa98:	4629      	mov	r1, r5
 800aa9a:	eb43 0901 	adc.w	r9, r3, r1
 800aa9e:	f04f 0200 	mov.w	r2, #0
 800aaa2:	f04f 0300 	mov.w	r3, #0
 800aaa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aaaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aaae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aab2:	4690      	mov	r8, r2
 800aab4:	4699      	mov	r9, r3
 800aab6:	4623      	mov	r3, r4
 800aab8:	eb18 0303 	adds.w	r3, r8, r3
 800aabc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aac0:	462b      	mov	r3, r5
 800aac2:	eb49 0303 	adc.w	r3, r9, r3
 800aac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aaca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aad6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800aada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aade:	460b      	mov	r3, r1
 800aae0:	18db      	adds	r3, r3, r3
 800aae2:	653b      	str	r3, [r7, #80]	@ 0x50
 800aae4:	4613      	mov	r3, r2
 800aae6:	eb42 0303 	adc.w	r3, r2, r3
 800aaea:	657b      	str	r3, [r7, #84]	@ 0x54
 800aaec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800aaf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800aaf4:	f7fd fb6e 	bl	80081d4 <__aeabi_uldivmod>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4b61      	ldr	r3, [pc, #388]	@ (800ac84 <UART_SetConfig+0x2d4>)
 800aafe:	fba3 2302 	umull	r2, r3, r3, r2
 800ab02:	095b      	lsrs	r3, r3, #5
 800ab04:	011c      	lsls	r4, r3, #4
 800ab06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ab14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ab18:	4642      	mov	r2, r8
 800ab1a:	464b      	mov	r3, r9
 800ab1c:	1891      	adds	r1, r2, r2
 800ab1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ab20:	415b      	adcs	r3, r3
 800ab22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ab28:	4641      	mov	r1, r8
 800ab2a:	eb12 0a01 	adds.w	sl, r2, r1
 800ab2e:	4649      	mov	r1, r9
 800ab30:	eb43 0b01 	adc.w	fp, r3, r1
 800ab34:	f04f 0200 	mov.w	r2, #0
 800ab38:	f04f 0300 	mov.w	r3, #0
 800ab3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ab44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab48:	4692      	mov	sl, r2
 800ab4a:	469b      	mov	fp, r3
 800ab4c:	4643      	mov	r3, r8
 800ab4e:	eb1a 0303 	adds.w	r3, sl, r3
 800ab52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab56:	464b      	mov	r3, r9
 800ab58:	eb4b 0303 	adc.w	r3, fp, r3
 800ab5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ab60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ab70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab74:	460b      	mov	r3, r1
 800ab76:	18db      	adds	r3, r3, r3
 800ab78:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	eb42 0303 	adc.w	r3, r2, r3
 800ab80:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ab86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ab8a:	f7fd fb23 	bl	80081d4 <__aeabi_uldivmod>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	4611      	mov	r1, r2
 800ab94:	4b3b      	ldr	r3, [pc, #236]	@ (800ac84 <UART_SetConfig+0x2d4>)
 800ab96:	fba3 2301 	umull	r2, r3, r3, r1
 800ab9a:	095b      	lsrs	r3, r3, #5
 800ab9c:	2264      	movs	r2, #100	@ 0x64
 800ab9e:	fb02 f303 	mul.w	r3, r2, r3
 800aba2:	1acb      	subs	r3, r1, r3
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800abaa:	4b36      	ldr	r3, [pc, #216]	@ (800ac84 <UART_SetConfig+0x2d4>)
 800abac:	fba3 2302 	umull	r2, r3, r3, r2
 800abb0:	095b      	lsrs	r3, r3, #5
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800abb8:	441c      	add	r4, r3
 800abba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800abc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800abc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800abcc:	4642      	mov	r2, r8
 800abce:	464b      	mov	r3, r9
 800abd0:	1891      	adds	r1, r2, r2
 800abd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800abd4:	415b      	adcs	r3, r3
 800abd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800abdc:	4641      	mov	r1, r8
 800abde:	1851      	adds	r1, r2, r1
 800abe0:	6339      	str	r1, [r7, #48]	@ 0x30
 800abe2:	4649      	mov	r1, r9
 800abe4:	414b      	adcs	r3, r1
 800abe6:	637b      	str	r3, [r7, #52]	@ 0x34
 800abe8:	f04f 0200 	mov.w	r2, #0
 800abec:	f04f 0300 	mov.w	r3, #0
 800abf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800abf4:	4659      	mov	r1, fp
 800abf6:	00cb      	lsls	r3, r1, #3
 800abf8:	4651      	mov	r1, sl
 800abfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abfe:	4651      	mov	r1, sl
 800ac00:	00ca      	lsls	r2, r1, #3
 800ac02:	4610      	mov	r0, r2
 800ac04:	4619      	mov	r1, r3
 800ac06:	4603      	mov	r3, r0
 800ac08:	4642      	mov	r2, r8
 800ac0a:	189b      	adds	r3, r3, r2
 800ac0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac10:	464b      	mov	r3, r9
 800ac12:	460a      	mov	r2, r1
 800ac14:	eb42 0303 	adc.w	r3, r2, r3
 800ac18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ac28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ac2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ac30:	460b      	mov	r3, r1
 800ac32:	18db      	adds	r3, r3, r3
 800ac34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac36:	4613      	mov	r3, r2
 800ac38:	eb42 0303 	adc.w	r3, r2, r3
 800ac3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ac42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ac46:	f7fd fac5 	bl	80081d4 <__aeabi_uldivmod>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <UART_SetConfig+0x2d4>)
 800ac50:	fba3 1302 	umull	r1, r3, r3, r2
 800ac54:	095b      	lsrs	r3, r3, #5
 800ac56:	2164      	movs	r1, #100	@ 0x64
 800ac58:	fb01 f303 	mul.w	r3, r1, r3
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	3332      	adds	r3, #50	@ 0x32
 800ac62:	4a08      	ldr	r2, [pc, #32]	@ (800ac84 <UART_SetConfig+0x2d4>)
 800ac64:	fba2 2303 	umull	r2, r3, r2, r3
 800ac68:	095b      	lsrs	r3, r3, #5
 800ac6a:	f003 0207 	and.w	r2, r3, #7
 800ac6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4422      	add	r2, r4
 800ac76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac78:	e106      	b.n	800ae88 <UART_SetConfig+0x4d8>
 800ac7a:	bf00      	nop
 800ac7c:	40011000 	.word	0x40011000
 800ac80:	40011400 	.word	0x40011400
 800ac84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ac92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ac96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ac9a:	4642      	mov	r2, r8
 800ac9c:	464b      	mov	r3, r9
 800ac9e:	1891      	adds	r1, r2, r2
 800aca0:	6239      	str	r1, [r7, #32]
 800aca2:	415b      	adcs	r3, r3
 800aca4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800acaa:	4641      	mov	r1, r8
 800acac:	1854      	adds	r4, r2, r1
 800acae:	4649      	mov	r1, r9
 800acb0:	eb43 0501 	adc.w	r5, r3, r1
 800acb4:	f04f 0200 	mov.w	r2, #0
 800acb8:	f04f 0300 	mov.w	r3, #0
 800acbc:	00eb      	lsls	r3, r5, #3
 800acbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800acc2:	00e2      	lsls	r2, r4, #3
 800acc4:	4614      	mov	r4, r2
 800acc6:	461d      	mov	r5, r3
 800acc8:	4643      	mov	r3, r8
 800acca:	18e3      	adds	r3, r4, r3
 800accc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800acd0:	464b      	mov	r3, r9
 800acd2:	eb45 0303 	adc.w	r3, r5, r3
 800acd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800acda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ace6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800acea:	f04f 0200 	mov.w	r2, #0
 800acee:	f04f 0300 	mov.w	r3, #0
 800acf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800acf6:	4629      	mov	r1, r5
 800acf8:	008b      	lsls	r3, r1, #2
 800acfa:	4621      	mov	r1, r4
 800acfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad00:	4621      	mov	r1, r4
 800ad02:	008a      	lsls	r2, r1, #2
 800ad04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ad08:	f7fd fa64 	bl	80081d4 <__aeabi_uldivmod>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4b60      	ldr	r3, [pc, #384]	@ (800ae94 <UART_SetConfig+0x4e4>)
 800ad12:	fba3 2302 	umull	r2, r3, r3, r2
 800ad16:	095b      	lsrs	r3, r3, #5
 800ad18:	011c      	lsls	r4, r3, #4
 800ad1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ad28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ad2c:	4642      	mov	r2, r8
 800ad2e:	464b      	mov	r3, r9
 800ad30:	1891      	adds	r1, r2, r2
 800ad32:	61b9      	str	r1, [r7, #24]
 800ad34:	415b      	adcs	r3, r3
 800ad36:	61fb      	str	r3, [r7, #28]
 800ad38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad3c:	4641      	mov	r1, r8
 800ad3e:	1851      	adds	r1, r2, r1
 800ad40:	6139      	str	r1, [r7, #16]
 800ad42:	4649      	mov	r1, r9
 800ad44:	414b      	adcs	r3, r1
 800ad46:	617b      	str	r3, [r7, #20]
 800ad48:	f04f 0200 	mov.w	r2, #0
 800ad4c:	f04f 0300 	mov.w	r3, #0
 800ad50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad54:	4659      	mov	r1, fp
 800ad56:	00cb      	lsls	r3, r1, #3
 800ad58:	4651      	mov	r1, sl
 800ad5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad5e:	4651      	mov	r1, sl
 800ad60:	00ca      	lsls	r2, r1, #3
 800ad62:	4610      	mov	r0, r2
 800ad64:	4619      	mov	r1, r3
 800ad66:	4603      	mov	r3, r0
 800ad68:	4642      	mov	r2, r8
 800ad6a:	189b      	adds	r3, r3, r2
 800ad6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad70:	464b      	mov	r3, r9
 800ad72:	460a      	mov	r2, r1
 800ad74:	eb42 0303 	adc.w	r3, r2, r3
 800ad78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ad88:	f04f 0200 	mov.w	r2, #0
 800ad8c:	f04f 0300 	mov.w	r3, #0
 800ad90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ad94:	4649      	mov	r1, r9
 800ad96:	008b      	lsls	r3, r1, #2
 800ad98:	4641      	mov	r1, r8
 800ad9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad9e:	4641      	mov	r1, r8
 800ada0:	008a      	lsls	r2, r1, #2
 800ada2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ada6:	f7fd fa15 	bl	80081d4 <__aeabi_uldivmod>
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4611      	mov	r1, r2
 800adb0:	4b38      	ldr	r3, [pc, #224]	@ (800ae94 <UART_SetConfig+0x4e4>)
 800adb2:	fba3 2301 	umull	r2, r3, r3, r1
 800adb6:	095b      	lsrs	r3, r3, #5
 800adb8:	2264      	movs	r2, #100	@ 0x64
 800adba:	fb02 f303 	mul.w	r3, r2, r3
 800adbe:	1acb      	subs	r3, r1, r3
 800adc0:	011b      	lsls	r3, r3, #4
 800adc2:	3332      	adds	r3, #50	@ 0x32
 800adc4:	4a33      	ldr	r2, [pc, #204]	@ (800ae94 <UART_SetConfig+0x4e4>)
 800adc6:	fba2 2303 	umull	r2, r3, r2, r3
 800adca:	095b      	lsrs	r3, r3, #5
 800adcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800add0:	441c      	add	r4, r3
 800add2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800add6:	2200      	movs	r2, #0
 800add8:	673b      	str	r3, [r7, #112]	@ 0x70
 800adda:	677a      	str	r2, [r7, #116]	@ 0x74
 800addc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ade0:	4642      	mov	r2, r8
 800ade2:	464b      	mov	r3, r9
 800ade4:	1891      	adds	r1, r2, r2
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	415b      	adcs	r3, r3
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800adf0:	4641      	mov	r1, r8
 800adf2:	1851      	adds	r1, r2, r1
 800adf4:	6039      	str	r1, [r7, #0]
 800adf6:	4649      	mov	r1, r9
 800adf8:	414b      	adcs	r3, r1
 800adfa:	607b      	str	r3, [r7, #4]
 800adfc:	f04f 0200 	mov.w	r2, #0
 800ae00:	f04f 0300 	mov.w	r3, #0
 800ae04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae08:	4659      	mov	r1, fp
 800ae0a:	00cb      	lsls	r3, r1, #3
 800ae0c:	4651      	mov	r1, sl
 800ae0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae12:	4651      	mov	r1, sl
 800ae14:	00ca      	lsls	r2, r1, #3
 800ae16:	4610      	mov	r0, r2
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	4642      	mov	r2, r8
 800ae1e:	189b      	adds	r3, r3, r2
 800ae20:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae22:	464b      	mov	r3, r9
 800ae24:	460a      	mov	r2, r1
 800ae26:	eb42 0303 	adc.w	r3, r2, r3
 800ae2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae36:	667a      	str	r2, [r7, #100]	@ 0x64
 800ae38:	f04f 0200 	mov.w	r2, #0
 800ae3c:	f04f 0300 	mov.w	r3, #0
 800ae40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ae44:	4649      	mov	r1, r9
 800ae46:	008b      	lsls	r3, r1, #2
 800ae48:	4641      	mov	r1, r8
 800ae4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae4e:	4641      	mov	r1, r8
 800ae50:	008a      	lsls	r2, r1, #2
 800ae52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ae56:	f7fd f9bd 	bl	80081d4 <__aeabi_uldivmod>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae94 <UART_SetConfig+0x4e4>)
 800ae60:	fba3 1302 	umull	r1, r3, r3, r2
 800ae64:	095b      	lsrs	r3, r3, #5
 800ae66:	2164      	movs	r1, #100	@ 0x64
 800ae68:	fb01 f303 	mul.w	r3, r1, r3
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	011b      	lsls	r3, r3, #4
 800ae70:	3332      	adds	r3, #50	@ 0x32
 800ae72:	4a08      	ldr	r2, [pc, #32]	@ (800ae94 <UART_SetConfig+0x4e4>)
 800ae74:	fba2 2303 	umull	r2, r3, r2, r3
 800ae78:	095b      	lsrs	r3, r3, #5
 800ae7a:	f003 020f 	and.w	r2, r3, #15
 800ae7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4422      	add	r2, r4
 800ae86:	609a      	str	r2, [r3, #8]
}
 800ae88:	bf00      	nop
 800ae8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae94:	51eb851f 	.word	0x51eb851f

0800ae98 <memset>:
 800ae98:	4402      	add	r2, r0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d100      	bne.n	800aea2 <memset+0xa>
 800aea0:	4770      	bx	lr
 800aea2:	f803 1b01 	strb.w	r1, [r3], #1
 800aea6:	e7f9      	b.n	800ae9c <memset+0x4>

0800aea8 <__libc_init_array>:
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	4d0d      	ldr	r5, [pc, #52]	@ (800aee0 <__libc_init_array+0x38>)
 800aeac:	4c0d      	ldr	r4, [pc, #52]	@ (800aee4 <__libc_init_array+0x3c>)
 800aeae:	1b64      	subs	r4, r4, r5
 800aeb0:	10a4      	asrs	r4, r4, #2
 800aeb2:	2600      	movs	r6, #0
 800aeb4:	42a6      	cmp	r6, r4
 800aeb6:	d109      	bne.n	800aecc <__libc_init_array+0x24>
 800aeb8:	4d0b      	ldr	r5, [pc, #44]	@ (800aee8 <__libc_init_array+0x40>)
 800aeba:	4c0c      	ldr	r4, [pc, #48]	@ (800aeec <__libc_init_array+0x44>)
 800aebc:	f000 f818 	bl	800aef0 <_init>
 800aec0:	1b64      	subs	r4, r4, r5
 800aec2:	10a4      	asrs	r4, r4, #2
 800aec4:	2600      	movs	r6, #0
 800aec6:	42a6      	cmp	r6, r4
 800aec8:	d105      	bne.n	800aed6 <__libc_init_array+0x2e>
 800aeca:	bd70      	pop	{r4, r5, r6, pc}
 800aecc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed0:	4798      	blx	r3
 800aed2:	3601      	adds	r6, #1
 800aed4:	e7ee      	b.n	800aeb4 <__libc_init_array+0xc>
 800aed6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeda:	4798      	blx	r3
 800aedc:	3601      	adds	r6, #1
 800aede:	e7f2      	b.n	800aec6 <__libc_init_array+0x1e>
 800aee0:	0800af28 	.word	0x0800af28
 800aee4:	0800af28 	.word	0x0800af28
 800aee8:	0800af28 	.word	0x0800af28
 800aeec:	0800af2c 	.word	0x0800af2c

0800aef0 <_init>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	bf00      	nop
 800aef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef6:	bc08      	pop	{r3}
 800aef8:	469e      	mov	lr, r3
 800aefa:	4770      	bx	lr

0800aefc <_fini>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	bf00      	nop
 800af00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af02:	bc08      	pop	{r3}
 800af04:	469e      	mov	lr, r3
 800af06:	4770      	bx	lr
